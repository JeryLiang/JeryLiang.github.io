{"title":"Springboot超详细搭建过程","uid":"aaca0be6401ddc4b6b987223429803e8","slug":"Springboot超详细搭建过程","date":"2019-03-17T07:00:41.000Z","updated":"2021-07-01T07:30:11.008Z","comments":true,"path":"api/articles/Springboot超详细搭建过程.json","keywords":null,"cover":"../img/Springboot超详细搭建过程/cover.jpeg","content":"<h4 id=\"一、创建篇\"><a href=\"#一、创建篇\" class=\"headerlink\" title=\"一、创建篇\"></a>一、创建篇</h4><ol>\n<li><p>新建项目，如下图所示。</p>\n<p> <img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/1.png\" alt=\"image\"> </p>\n</li>\n<li><p>选择Spring Initializr。</p>\n<p> <img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/2.png\" alt=\"image\"></p>\n</li>\n<li><p>填写Group、Artifact和Name后点击next，如下图所示。</p>\n<p> <img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/3.png\" alt=\"image\"></p>\n</li>\n<li><p> 选择需要的组件：基本组件有web模块中的web和web server、SQL模块中的MySQL、JDBC和Mybatis、额外的组件可以根据需求自行选择，不过需要注意的是springboot版本不要选择太高，此处选择的是1.5.19版本。</p>\n</li>\n</ol>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/4.png\" alt=\"image\"></p>\n<p>5.确定项目名和项目存储路径。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/5.png\" alt=\"image\"></p>\n<p>6.点击finish，整个项目架构如下图所示。其中(项目名+Application).class为sprinboot核心类、application.properties为主配置文件。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/6.png\" alt=\"image\"></p>\n<h4 id=\"二、配置篇\"><a href=\"#二、配置篇\" class=\"headerlink\" title=\"二、配置篇\"></a>二、配置篇</h4><p>1.<strong>连接数据库配置</strong>(因为我们已经在选择组件中选择了SQL和JDBC)所以不需要手动引入Maven依赖，只需要直接配置就好），(.yml)和(.properties)的配置格式是不一样的，我个人比较喜欢使用yml格式的，因此我将application.properties改为了application.yml。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/7.png\" alt=\"image\"></p>\n<p>将properties后缀名改为yml，点击refactor即可完成修改。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/8.png\" alt=\"image\"></p>\n<p>具体配置如下，(注：yml配置格式相对教严格，需要注意以下各内容的具体位置)</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/9.png\" alt=\"image\"> </p>\n<p>driver-class-name为数据库连接驱动，username和password为填写自己想要连接的数据库用户名和密码，url中的spring为我本地中的一个数据库，使用utf-8编码格式，不开启ssl验证。</p>\n<p>2.在startProject\\src\\main\\java\\com.test.demo中，创建MVC模式对应的package，如下</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/10.png\" alt=\"image\"></p>\n<p>domain包主要用来集中管理相应的实体类，controller为控制层，service和serviceImpl分别为服务层和服务实现层，mapper用来管理的是与mybatis结合后存储的接口类，类似于传统的dao层。</p>\n<p>3.在startProject\\src\\main\\resources中，创建mapperXml，存放mapper对应的mapper.xml文件。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/11.png\" alt=\"image\"> </p>\n<p>4.配置项目端口号和配置定位mybatis的mapperXml路径。其中开放的端口号设置为18099(可自行指定端口，但是不可与其他开放的端口有冲突，不指定时默认为8080端口)。mapper-location指定了扫描mapperXml中的所有以xml为后缀名的文件。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/12.png\" alt=\"image\"></p>\n<h4 id=\"三、测试篇\"><a href=\"#三、测试篇\" class=\"headerlink\" title=\"三、测试篇\"></a>三、测试篇</h4><p>1.在domain包中创建实体类User.class。属性自定义，与数据库中表对应属性即可。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/13.png\" alt=\"image\"><br>2.在controller包中创建UserController类。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/14.png\" alt=\"image\"></p>\n<p>3.在UserController中编写如下代码。注解@RequestMapping中的value值可以自定义，其为请求该接口的一个url。第一个@RequestMapping为类级别，第二个@RequestMapping为方法级别。如我们需请求该接口，具体如下即可调用该方法：localhost:18099/user/login。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/15.png\" alt=\"image\"> </p>\n<p>4.在service中创建UserService接口。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/16.png\" alt=\"image\"></p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/17.png\" alt=\"image\"> </p>\n<p>输入名字UserService，选择Interface，点击OK即可完成创建。</p>\n<p>5.在serviceImpl中创建UserServiceImpl实现类，实现UserService。加入注解@Service并implements UserService。</p>\n<p>!<img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/18.png\" alt=\"image\"></p>\n<p>6.在mapper中创建UserMapper接口，创建方法与第4步一致。并加入注解@Repository。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/19.png\" alt=\"image\"></p>\n<p>7.在resource下的mapperXml中创建UserMapper.xml文件。过程如下图所示，因未找到具体的xml创建，所以可以选择圈出的3个红圈中的任意一个，一会直接修改后缀名，并将如下代码复制覆盖文件内容即可。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/20.png\" alt=\"image\"></p>\n<p>代码如下(注：namespace中的com.test.demo.mapper.UserMapper需要关联的Mapper的具体路径和名字。此处意思即为：该xml关联的是UserMapper)。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot; &gt;\n&lt;mapper namespace&#x3D;&quot;com.test.demo.mapper.UserMapper&quot;&gt;\n&lt;&#x2F;mapper&gt;</code></pre>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/21.png\" alt=\"image\"></p>\n<p>8.在UserController中注入UserService。使用注解@Autowired自动注入。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/22.png\" alt=\"image\"><br>9.调用Service层的getUserById()方法，根据UserId来进行查询，并输出结果。因为我的UserService中还未创建getUserById()方法，所以我们要到UserService中创建该方法，如第10步所示。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/23.png\" alt=\"image\"></p>\n<p>我在User实体类中生成了getter和setter方法，并重写了toString方法，以便查看属性值。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/24.png\" alt=\"image\"></p>\n<p>10.在UserService中编写接口方法getUserById()。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/25.png\" alt=\"image\"></p>\n<p>11.在UserServiceImpl中注入UserMapper并实现该方法。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/26.png\" alt=\"image\"></p>\n<p>12.上一步中是返回UserMapper中的getUserById方法返回的结果，因此要在UserMapper中编写该方法。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/27.png\" alt=\"image\"></p>\n<p>13.在UserMapper中实现查询，即getUserById。这里涉及的是有关mybatis的相关知识，可参考如下链接：</p>\n<p><a href=\"https://www.jianshu.com/p/48141abd6a5a\">https://www.jianshu.com/p/48141abd6a5a</a></p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/28.png\" alt=\"image\"> </p>\n<p>代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;resultMap id&#x3D;&quot;userList&quot; type&#x3D;&quot;com.test.demo.domain.User&quot;&gt;\n &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot; jdbcType&#x3D;&quot;INTEGER&quot;&#x2F;&gt;\n &lt;result column&#x3D;&quot;username&quot; property&#x3D;&quot;username&quot; jdbcType&#x3D;&quot;VARCHAR&quot;&#x2F;&gt;\n &lt;result column&#x3D;&quot;password&quot; property&#x3D;&quot;password&quot; jdbcType&#x3D;&quot;VARCHAR&quot;&#x2F;&gt;\n &lt;result column&#x3D;&quot;note&quot; property&#x3D;&quot;note&quot; jdbcType&#x3D;&quot;VARCHAR&quot;&#x2F;&gt;\n &lt;&#x2F;resultMap&gt;\n &lt;select id&#x3D;&quot;getUserById&quot; parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;userList&quot;&gt;\n SELECT * FROM t_user WHERE id &#x3D; #&#123;id&#125;\n &lt;&#x2F;select&gt;</code></pre>\n<p>14.在核心类中（即项目名+application）中，添加扫描mapper包，即mapper的路径。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/29.png\" alt=\"image\"></p>\n<p>15.至此，整个配置就配置完了，我们开始启动项目进行测试吧！如下为启动成功的界面。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/30.png\" alt=\"image\"></p>\n<p>开始使用postman测试。输入url:localhost18099/user/login。点击send。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/31.png\" alt=\"image\"> </p>\n<p>可以看到控制台输出的结果，大功告成。</p>\n<p><img src=\"../img/Springboot%E8%B6%85%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/32.png\" alt=\"image\"></p>\n","text":"一、创建篇 新建项目，如下图所示。 选择Spring Initializr。 填写Group、Artifact和Name后点击next，如下图所示。 选择需要的组件：基本组件有web模块中的web和web server、SQL模块中的MySQL、JDBC和Mybatis、额外的组...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"springboot","slug":"springboot","count":2,"path":"api/tags/springboot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%88%9B%E5%BB%BA%E7%AF%87\"><span class=\"toc-text\">一、创建篇</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%85%8D%E7%BD%AE%E7%AF%87\"><span class=\"toc-text\">二、配置篇</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%B5%8B%E8%AF%95%E7%AF%87\"><span class=\"toc-text\">三、测试篇</span></a></li></ol>","author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"mapped":true,"prev_post":{"title":"Nginx详解","uid":"d8b4487bc85f218a66607245054b2ebc","slug":"Nginx详解","date":"2019-03-19T06:52:16.000Z","updated":"2021-07-01T07:37:02.977Z","comments":true,"path":"api/articles/Nginx详解.json","keywords":null,"cover":"../img/Nginx详解/cover.jpeg","text":"nginx详解一、什么是正向代理和反向代理？ 正向代理 反向代理 URI、URL和URN: URI ：Uniform Resource Identifier，统一资源标识符； URL：Uniform Resource Locator，统一资源定位符； URN：Uniform Re...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}},"next_post":{"title":"Jenkins持续集成","uid":"03262ebd7a1c2d262927581eaf4e7b3b","slug":"Jenkins持续集成","date":"2018-11-24T07:56:32.000Z","updated":"2021-07-05T03:19:53.739Z","comments":true,"path":"api/articles/Jenkins持续集成.json","keywords":null,"cover":"../img/Jenkins持续集成/cover.jpeg","text":" 什么是Jenkins？ Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomca...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"CI","slug":"CI","count":1,"path":"api/tags/CI.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}}}