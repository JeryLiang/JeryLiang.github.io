{"title":"slf4j+log4j2配置日志管理系统","uid":"4f52276e8a611fec0c598c202290c486","slug":"slf4j-log4j2配置日志管理系统","date":"2019-07-05T03:27:06.000Z","updated":"2021-07-08T11:34:44.171Z","comments":true,"path":"api/articles/slf4j-log4j2配置日志管理系统.json","keywords":null,"cover":"../img/日志管理系统/cover.jpeg","content":"<p>日志解决方案这么多，为何我们选择slf4j+log4j2来作为日志系统呢？首先我们来将常见的日志作对比。</p>\n<h4 id=\"1-日志解决方案对比\"><a href=\"#1-日志解决方案对比\" class=\"headerlink\" title=\"1 日志解决方案对比\"></a>1 日志解决方案对比</h4><h5 id=\"1-1-log4j\"><a href=\"#1-1-log4j\" class=\"headerlink\" title=\"1.1 log4j\"></a>1.1 log4j</h5><p>Log4j是Apache的一个开放源代码项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、数据库等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。 </p>\n<p>Log4j有7种不同的log级别，按照等级从低到高依次为：TRACE、DEBUG、INFO、WARN、ERROR、FATAL、OFF。如果配置为OFF级别，表示关闭log。 </p>\n<p>Log4j支持两种格式的配置文件：properties和xml。包含三个主要的组件：Logger、appender、Layout。</p>\n<h5 id=\"1-2-log4j2\"><a href=\"#1-2-log4j2\" class=\"headerlink\" title=\"1.2 log4j2\"></a>1.2 log4j2</h5><p>Spring Boot1.4以及之后的版本已经不支持log4j，log4j也很久没有更新了，现在已经有很多其他的日志框架对Log4j进行了改良，比如说SLF4J、Logback等。而且Log4j2在各个方面都与Logback非常相似，那么为什么我们还需要Log4j2呢？ </p>\n<ul>\n<li>插件式结构。Log4j 2支持插件式结构。我们可以根据自己的需要自行扩展Log4j2我们可以实现自己的appender、logger、filter。 </li>\n<li>配置文件优化。在配置文件中可以引用属性，还可以直接替代或传递到组件。而且支持json格式的配置文件。不像其他的日志框架，它在重新配置的时候不会丢失之前的日志文件。 </li>\n<li>Java 5的并发性。Log4j2利用Java 5中的并发特性支持，尽可能地执行最低层次的加锁。解决了在log4j 1.x中存留的死锁的问题。 </li>\n<li>异步logger。Log4j2是基于LMAX Disruptor库的。在多线程的场景下，和已有的日志框架相比，异步的logger拥有10倍左右的效率提升。 </li>\n</ul>\n<h5 id=\"1-3-logback\"><a href=\"#1-3-logback\" class=\"headerlink\" title=\"1.3 logback\"></a>1.3 logback</h5><p>Logback，一个“可靠、通用、快速而又灵活的Java日志框架”。logback当前分成三个模块：logback-core，logback- classic和logback-access。logback-core是其它两个模块的基础模块。logback-classic是log4j的一个改良版本。此外logback-classic完整实现SLF4J API使你可以很方便地更换成其它日志系统如log4j或JDK Logging。logback-access访问模块与Servlet容器集成提供通过Http来访问日志的功能。 </p>\n<p>1） logback-core: Joran, Status, context, pattern parsing<br>2）logback-classic: developer logging<br>3） logback-access: The log generated when a user accesses a web-page on a web server. Integrates seamlessly with Jetty and Tomcat.</p>\n<p><strong>Logback相对于log4j的优势</strong>： </p>\n<p>1）logback比log4j要快大约10倍，而且消耗更少的内存。<br>2）logback-classic模块直接实现了SLF4J的接口，所以我们迁移到logback几乎是零开销的。<br>3）logback不仅支持xml格式的配置文件，还支持groovy格式的配置文件。相比之下，Groovy风格的配置文件更加直观，简洁。<br>4） logback-classic能够检测到配置文件的更新，并且自动重新加载配置文件。<br>5）logback能够优雅的从I/O异常中恢复，从而我们不用重新启动应用程序来恢复logger。<br>6）logback能够根据配置文件中设置的上限值，自动删除旧的日志文件。<br>7）logback能够自动压缩日志文件。<br>8）logback能够在配置文件中加入条件判断（if-then-else)。可以避免不同的开发环境（dev、test、uat…）的配置文件的重复。<br>9）logback带来更多的filter。<br>10）logback的stack trace中会包含详细的包信息。<br>11）logback-access和Jetty、Tomcat集成提供了功能强大的HTTP-access日志。<br>配置文件：需要在项目的src目录下建立一个logback.xml。<br>注：（1）logback首先会试着查找logback.groovy文件；<br>（2）当没有找到时，继续试着查找logback-test.xml文件；<br>（3）当没有找到时，继续试着查找logback.xml文件；<br>（4）如果仍然没有找到，则使用默认配置（打印到控制台）。</p>\n<p>logback的一些配置介绍： </p>\n<ul>\n<li><p>控制台输出<br>在Spring Boot中默认配置了ERROR、WARN和INFO级别的日志输出到控制台。我们可以通过两种方式切换至DEBUG级别：<br>在运行命令后加入–debug标志，如：$ java -jar test.jar –debug<br>在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</p>\n</li>\n<li><p>多彩输出<br>如果你的终端支持ANSI，设置彩色输出会让日志更具可读性。通过在application.properties中设置spring.output.ansi.enabled参数来支持。<br>NEVER：禁用ANSI-colored输出（默认项）<br>DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）<br>ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用</p>\n</li>\n<li><p>文件输出<br>Spring Boot默认配置只会输出到控制台，并不会记录到文件中，但是我们通常生产环境使用时都需要以文件方式记录。<br>若要增加文件输出，需要在application.properties中配置logging.file或logging.path属性。<br>logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log<br>logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=../logs<br>日志文件会在10Mb大小的时候被截断，产生新的日志文件，默认级别为：ERROR、WARN、INFO</p>\n</li>\n<li><p>级别控制<br>在Spring Boot中只需要在application.properties中进行配置完成日志记录的级别控制。<br>配置格式：logging.level.=LEVEL<br>logging.level：日志级别控制前缀，为包名或Logger名<br>LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF<br>举例：<br>logging.level.com.test=DEBUG：com.test包下所有class以DEBUG级别输出<br>logging.level.root=WARN：root日志以WARN级别输出</p>\n</li>\n<li><p>自定义输出格式<br>在Spring Boot中可以通过在application.properties配置如下参数控制输出格式：<br>logging.pattern.console：定义输出到控制台的样式（不支持JDK Logger）<br>logging.pattern.file：定义输出到文件的样式（不支持JDK Logger）</p>\n</li>\n</ul>\n<h4 id=\"2-日志门面slf4j\"><a href=\"#2-日志门面slf4j\" class=\"headerlink\" title=\"2 日志门面slf4j\"></a>2 日志门面slf4j</h4><p>slf4j，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，而是通过Facade Pattern提供一些Java logging API，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。作者创建SLF4J的目的是为了替代Jakarta Commons-Logging。 </p>\n<p>实际上，SLF4J所提供的核心API是一些接口以及一个LoggerFactory的工厂类。在使用SLF4J的时候，不需要在代码中或配置文件中指定你打算使用那个具体的日志系统。类似于Apache Common-Logging，SLF4J是对不同日志框架提供的一个门面封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案。但是，他在编译时静态绑定真正的Log库。使用SLF4J时，如果你需要使用某一种日志实现，那么你必须选择正确的SLF4J的jar包的集合（各种桥接包）。SLF4J提供了统一的记录日志的接口，只要按照其提供的方法记录即可，最终日志的格式、记录级别、输出方式等通过具体日志系统的配置来实现，因此可以在应用中灵活切换日志系统。</p>\n<h4 id=\"3-方案选择\"><a href=\"#3-方案选择\" class=\"headerlink\" title=\"3 方案选择\"></a>3 方案选择</h4><p>log4j已经很久没更新了，它的改良版log4j2与Logback都有相应的优化。而slf4j则是门面日志，它不是具体的日志解决方案，为此，常常与具体的实现方案使用，好处就是允许最终用户在部署其应用时使用其所希望的日志系统。那么Logback与log4j2具体选择哪一个呢？以下是我参考的一篇<a href=\"%5Bhttps://www.jianshu.com/p/359b14067b9e%5D(https://www.jianshu.com/p/359b14067b9e)\">关于log4j2与logback性能测试的文章</a>截图：</p>\n<p><img src=\"../img/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1.png\" alt=\"image.png\"></p>\n<p>为此我选择了slf4j + log4j2来实现项目的日志系统。</p>\n<h4 id=\"4-具体实现\"><a href=\"#4-具体实现\" class=\"headerlink\" title=\"4 具体实现\"></a>4 具体实现</h4><h5 id=\"4-1-去除旧的日志依赖\"><a href=\"#4-1-去除旧的日志依赖\" class=\"headerlink\" title=\"4.1 去除旧的日志依赖\"></a>4.1 去除旧的日志依赖</h5><p> 在<dependencies></dependencies>中加入以下代码，以下主要是排除旧的log4j日志依赖和与门面日志关联的slf4j+log4j12依赖。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;exclusions&gt;\n  &lt;exclusion&gt;\n             &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n             &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;\n   &lt;&#x2F;exclusion&gt;\n\n   &lt;exclusion&gt;\n             &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;\n             &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;\n   &lt;&#x2F;exclusion&gt;\n&lt;exclusions&gt;</code></pre>\n<p>若以前的配置文件在<code>web.xml</code>中加载了的话需要注释掉：<br><img src=\"../img/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2.png\" alt=\"image.png\"></p>\n<p>#####4.2 添加新的日志解决方案依赖<br>在<code>pom.xml</code>中添加我们的新日志解决方案依赖，若之前项目未加入slf4j的依赖的话需要我们加入相应的slf4j的核心依赖包</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;!--日志系统依赖start--&gt;\n\n       &lt;!-- slf4j核心包--&gt;\n       &lt;dependency&gt;\n           &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n           &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;\n           &lt;version&gt;1.7.25&lt;&#x2F;version&gt;\n       &lt;&#x2F;dependency&gt;\n\n       &lt;!--slf4j对应log4j2的中间件,即桥接，告诉slf4j使用log4j2--&gt;\n       &lt;dependency&gt;\n           &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;\n           &lt;artifactId&gt;log4j-slf4j-impl&lt;&#x2F;artifactId&gt;\n           &lt;version&gt;2.10.0&lt;&#x2F;version&gt;\n       &lt;&#x2F;dependency&gt;\n\n       &lt;!--log4j2核心包--&gt;\n       &lt;dependency&gt;\n           &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;\n           &lt;artifactId&gt;log4j-core&lt;&#x2F;artifactId&gt;\n           &lt;version&gt;2.10.0&lt;&#x2F;version&gt;\n       &lt;&#x2F;dependency&gt;\n\n       &lt;dependency&gt;\n           &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;\n           &lt;artifactId&gt;log4j-api&lt;&#x2F;artifactId&gt;\n           &lt;version&gt;2.10.0&lt;&#x2F;version&gt;\n       &lt;&#x2F;dependency&gt;\n\n\n       &lt;!--日志系统依赖end--&gt;\n</code></pre>\n\n<h4 id=\"5-配置log4j2\"><a href=\"#5-配置log4j2\" class=\"headerlink\" title=\"5 配置log4j2\"></a>5 配置log4j2</h4><h5 id=\"5-1-配置文件格式及读取优先级：\"><a href=\"#5-1-配置文件格式及读取优先级：\" class=\"headerlink\" title=\"5.1 配置文件格式及读取优先级：\"></a>5.1 配置文件格式及读取优先级：</h5><p>Log4j2 配置文件后缀要求为”.xml”、”.json”或者”.jsn”。</p>\n<p>系统选择配置文件的优先级为（从先到后）：</p>\n<p>1）classpath下的名为log4j2-test.json 或者log4j2-test.jsn的文件.<br>2）classpath下的名为log4j2-test.xml的文件.<br>3）classpath下名为log4j2.json 或者log4j2.jsn的文件.<br>4）classpath下名为log4j2.xml的文件.<br>5）如果classpath下没有相关配置文件，则使用默认日志系统.</p>\n<h5 id=\"配置log4j2-xml\"><a href=\"#配置log4j2-xml\" class=\"headerlink\" title=\"配置log4j2.xml\"></a>配置log4j2.xml</h5><p>在项目中的classpath下新建log4j2的配置文件<code>log4j2.xml</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;\n&lt;configuration status&#x3D;&quot;WARN&quot;&gt;\n\n    &lt;Properties&gt; &lt;!-- 配置日志文件输出目录，此配置将日志输出到工程目录下的log4j2_logs文件夹 --&gt;\n        &lt;Property name&#x3D;&quot;LOG_HOME&quot;&gt;\n            log4j2_logs\n        &lt;&#x2F;Property&gt;\n    &lt;&#x2F;Properties&gt;\n\n    &lt;Appenders&gt;\n    &lt;!--这个输出控制台的配置，即System.out --&gt;\n    &lt;Console name&#x3D;&quot;console_out_appender&quot; target&#x3D;&quot;SYSTEM_OUT&quot;&gt;\n        &lt;!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) . --&gt;\n        &lt;ThresholdFilter level&#x3D;&quot;INFO&quot; onMatch&#x3D;&quot;ACCEPT&quot;\n                         onMismatch&#x3D;&quot;DENY&quot; &#x2F;&gt;\n        &lt;!-- 输出日志的格式 --&gt;\n        &lt;PatternLayout pattern&#x3D;&quot;%5p [%t] %d&#123;yyyy-MM-dd HH:mm:ss&#125; (%F:%L) %m%n&quot; &#x2F;&gt;\n    &lt;&#x2F;Console&gt;\n    &lt;!-- 这个输出控制台的配置，这里输出error级别的信息到System.err，在eclipse控制台上看到的是红色文字 --&gt;\n    &lt;Console name&#x3D;&quot;console_err_appender&quot; target&#x3D;&quot;SYSTEM_ERR&quot;&gt;\n        &lt;ThresholdFilter level&#x3D;&quot;ERROR&quot; onMatch&#x3D;&quot;ACCEPT&quot;\n                         onMismatch&#x3D;&quot;DENY&quot; &#x2F;&gt;\n        &lt;PatternLayout pattern&#x3D;&quot;%5p [%t] %d&#123;yyyy-MM-dd HH:mm:ss&#125; (%F:%L) %m%n&quot; &#x2F;&gt;\n    &lt;&#x2F;Console&gt;\n\n\n    &lt;!-- TRACE级别日志 ; 设置日志格式并配置日志压缩格式，压缩文件独立放在一个文件夹内， 日期格式不能为冒号，否则无法生成，因为文件名不允许有冒号，此appender只输出trace级别的数据到trace.log --&gt;\n    &lt;RollingFile name&#x3D;&quot;trace_appender&quot; immediateFlush&#x3D;&quot;true&quot;\n                 fileName&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;trace.log&quot; filePattern&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;trace&#x2F;trace - %d&#123;yyyy-MM-dd HH:mm:ss&#125;.log.gz&quot;&gt;\n        &lt;PatternLayout&gt;\n            &lt;pattern&gt;%5p [%t] %d&#123;yyyy-MM-dd HH:mm:ss&#125; (%F:%L) %m%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;PatternLayout&gt;\n        &lt;Policies&gt;\n            &lt;!-- 每个日志文件最大2MB --&gt;\n            &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;2MB&quot; &#x2F;&gt;\n        &lt;&#x2F;Policies&gt;\n        &lt;Filters&gt;\n            &lt;!-- 此Filter意思是，只输出TRACE级别的数据 DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志；\n                ACCEPT，日志会被立即处理，不再经过剩余过滤器。 --&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;debug&quot; onMatch&#x3D;&quot;DENY&quot;\n                             onMismatch&#x3D;&quot;NEUTRAL&quot; &#x2F;&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;trace&quot; onMatch&#x3D;&quot;ACCEPT&quot;\n                             onMismatch&#x3D;&quot;DENY&quot; &#x2F;&gt;\n        &lt;&#x2F;Filters&gt;\n    &lt;&#x2F;RollingFile&gt;\n\n    &lt;!-- DEBUG级别日志 设置日志格式并配置日志压缩格式，压缩文件独立放在一个文件夹内， 日期格式不能为冒号，否则无法生成，因为文件名不允许有冒号，此appender只输出debug级别的数据到debug.log; --&gt;\n    &lt;RollingFile name&#x3D;&quot;debug_appender&quot; immediateFlush&#x3D;&quot;true&quot;\n                 fileName&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;debug.log&quot; filePattern&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;debug&#x2F;debug - %d&#123;yyyy-MM-dd HH:mm:ss&#125;.log.gz&quot;&gt;\n        &lt;PatternLayout&gt;\n            &lt;pattern&gt;%5p [%t] %d&#123;yyyy-MM-dd HH:mm:ss&#125; (%F:%L) %m%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;PatternLayout&gt;\n        &lt;Policies&gt;&lt;!-- 每个日志文件最大2MB ; --&gt;\n            &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;2MB&quot; &#x2F;&gt;\n\n            &lt;!-- 如果启用此配置，则日志会按文件名生成新压缩文件， 即如果filePattern配置的日期格式为 %d&#123;yyyy-MM-dd HH&#125;\n                ，则每小时生成一个压缩文件， 如果filePattern配置的日期格式为 %d&#123;yyyy-MM-dd&#125; ，则天生成一个压缩文件 --&gt;\n            &lt;TimeBasedTriggeringPolicy interval&#x3D;&quot;1&quot;\n                                       modulate&#x3D;&quot;true&quot; &#x2F;&gt;\n\n        &lt;&#x2F;Policies&gt;\n        &lt;Filters&gt;&lt;!-- 此Filter意思是，只输出debug级别的数据 --&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;info&quot; onMatch&#x3D;&quot;DENY&quot;\n                             onMismatch&#x3D;&quot;NEUTRAL&quot; &#x2F;&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;debug&quot; onMatch&#x3D;&quot;ACCEPT&quot;\n                             onMismatch&#x3D;&quot;DENY&quot; &#x2F;&gt;\n        &lt;&#x2F;Filters&gt;\n    &lt;&#x2F;RollingFile&gt;\n\n    &lt;!-- INFO级别日志 --&gt;\n    &lt;RollingFile name&#x3D;&quot;info_appender&quot; immediateFlush&#x3D;&quot;true&quot;\n                 fileName&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;info.log&quot; filePattern&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;info&#x2F;info - %d&#123;yyyy-MM-dd HH:mm:ss&#125;.log.gz&quot;&gt;\n        &lt;PatternLayout&gt;\n            &lt;pattern&gt;%5p [%t] %d&#123;yyyy-MM-dd HH:mm:ss&#125; (%F:%L) %m%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;PatternLayout&gt;\n        &lt;Policies&gt;\n            &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;2MB&quot; &#x2F;&gt;\n        &lt;&#x2F;Policies&gt;\n        &lt;Filters&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;warn&quot; onMatch&#x3D;&quot;DENY&quot;\n                             onMismatch&#x3D;&quot;NEUTRAL&quot; &#x2F;&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;info&quot; onMatch&#x3D;&quot;ACCEPT&quot;\n                             onMismatch&#x3D;&quot;DENY&quot; &#x2F;&gt;\n        &lt;&#x2F;Filters&gt;\n    &lt;&#x2F;RollingFile&gt;\n\n    &lt;!-- WARN级别日志 --&gt;\n    &lt;RollingFile name&#x3D;&quot;warn_appender&quot; immediateFlush&#x3D;&quot;true&quot;\n                 fileName&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;warn.log&quot; filePattern&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;warn&#x2F;warn - %d&#123;yyyy-MM-dd HH:mm:ss&#125;.log.gz&quot;&gt;\n        &lt;PatternLayout&gt;\n            &lt;pattern&gt;%5p [%t] %d&#123;yyyy-MM-dd HH:mm:ss&#125; (%F:%L) %m%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;PatternLayout&gt;\n        &lt;Policies&gt;\n            &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;2MB&quot; &#x2F;&gt;\n        &lt;&#x2F;Policies&gt;\n        &lt;Filters&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;error&quot; onMatch&#x3D;&quot;DENY&quot;\n                             onMismatch&#x3D;&quot;NEUTRAL&quot; &#x2F;&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;warn&quot; onMatch&#x3D;&quot;ACCEPT&quot;\n                             onMismatch&#x3D;&quot;DENY&quot; &#x2F;&gt;\n        &lt;&#x2F;Filters&gt;\n    &lt;&#x2F;RollingFile&gt;\n\n    &lt;!-- ERROR级别日志 --&gt;\n    &lt;RollingFile name&#x3D;&quot;error_appender&quot; immediateFlush&#x3D;&quot;true&quot;\n                 fileName&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;error.log&quot; filePattern&#x3D;&quot;$&#123;LOG_HOME&#125;&#x2F;error&#x2F;error - %d&#123;yyyy-MM-dd HH:mm:ss&#125;.log.gz&quot;&gt;\n        &lt;PatternLayout&gt;\n            &lt;pattern&gt;%5p [%t] %d&#123;yyyy-MM-dd HH:mm:ss&#125; (%F:%L) %m%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;PatternLayout&gt;\n        &lt;Policies&gt;\n            &lt;SizeBasedTriggeringPolicy size&#x3D;&quot;2MB&quot; &#x2F;&gt;\n        &lt;&#x2F;Policies&gt;\n        &lt;Filters&gt;\n            &lt;ThresholdFilter level&#x3D;&quot;error&quot; onMatch&#x3D;&quot;ACCEPT&quot;\n                             onMismatch&#x3D;&quot;DENY&quot; &#x2F;&gt;\n        &lt;&#x2F;Filters&gt;\n    &lt;&#x2F;RollingFile&gt;\n&lt;&#x2F;Appenders&gt;\n\n    &lt;loggers&gt;\n        &lt;!--使appender生效--&gt;\n        &lt;!-- 配置日志的根节点 --&gt;\n        &lt;!-- 定义logger，只有定义了logger并引入了appender，appender才会生效 --&gt;\n        &lt;root level&#x3D;&quot;trace&quot;&gt;\n            &lt;appender-ref ref&#x3D;&quot;console_out_appender&quot; &#x2F;&gt;\n            &lt;appender-ref ref&#x3D;&quot;console_err_appender&quot; &#x2F;&gt;\n            &lt;appender-ref ref&#x3D;&quot;trace_appender&quot; &#x2F;&gt;\n            &lt;appender-ref ref&#x3D;&quot;debug_appender&quot; &#x2F;&gt;\n            &lt;appender-ref ref&#x3D;&quot;info_appender&quot; &#x2F;&gt;\n            &lt;appender-ref ref&#x3D;&quot;warn_appender&quot; &#x2F;&gt;\n            &lt;appender-ref ref&#x3D;&quot;error_appender&quot; &#x2F;&gt;\n        &lt;&#x2F;root&gt;\n\n    &lt;&#x2F;loggers&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<h4 id=\"6-测试日志输出\"><a href=\"#6-测试日志输出\" class=\"headerlink\" title=\"6 测试日志输出\"></a>6 测试日志输出</h4><p>在我们需要使用日志的类中加入以下代码，导入slf4j相应的包：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;</code></pre>\n\n<p>添加如下代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private final static Logger logger &#x3D;  LoggerFactory.getLogger(log4j2Test.class);</code></pre>\n<p>这是我使用测试类，若要在别的类使用，使用方法是一致的，只需要做上两步的操作即可：<br><img src=\"../img/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/3.png\" alt=\"image.png\"></p>\n<p>运行结果图如下：<br><img src=\"../img/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/4.png\" alt=\"image.png\"></p>\n<p><img src=\"../img/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/5.png\" alt=\"image.png\"></p>\n<p><strong>注意</strong></p>\n<p>在项目中，可能有的人导包并不是直接导入slf4j的包，而是指定的日志解决方案包，如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import org.apache.log4j.Logger</code></pre>\n<p>这种情况下，我们是直接使用了指定的日志解决方案，并没用发挥我们日志们面的一个作用，这样的话我们下次换日志解决方案的时候，需要修改所有类中导入此包的地方，整个过程会比较麻烦。</p>\n<p>为此，我们应该导入的是日志门面相应的包，这样我们项目更新日志解决方案的时候，只须修改依赖与配置文件即可，而不需要修改其它的代码。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.jianshu.com/p/191273d04d2d\">https://www.jianshu.com/p/191273d04d2d</a><br><a href=\"https://segmentfault.com/a/1190000015568449\">https://segmentfault.com/a/1190000015568449</a></p>\n","text":"日志解决方案这么多，为何我们选择slf4j+log4j2来作为日志系统呢？首先我们来将常见的日志作对比。 1 日志解决方案对比1.1 log4jLog4j是Apache的一个开放源代码项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、数据库等；我们也可以控...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"slf4j","slug":"slf4j","count":1,"path":"api/tags/slf4j.json"},{"name":"log4j2","slug":"log4j2","count":1,"path":"api/tags/log4j2.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%97%A5%E5%BF%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">1 日志解决方案对比</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-log4j\"><span class=\"toc-text\">1.1 log4j</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-log4j2\"><span class=\"toc-text\">1.2 log4j2</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-logback\"><span class=\"toc-text\">1.3 logback</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2slf4j\"><span class=\"toc-text\">2 日志门面slf4j</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%96%B9%E6%A1%88%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">3 方案选择</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4 具体实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-%E5%8E%BB%E9%99%A4%E6%97%A7%E7%9A%84%E6%97%A5%E5%BF%97%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">4.1 去除旧的日志依赖</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E9%85%8D%E7%BD%AElog4j2\"><span class=\"toc-text\">5 配置log4j2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-1-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%8A%E8%AF%BB%E5%8F%96%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%9A\"><span class=\"toc-text\">5.1 配置文件格式及读取优先级：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AElog4j2-xml\"><span class=\"toc-text\">配置log4j2.xml</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E6%B5%8B%E8%AF%95%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">6 测试日志输出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"mapped":true,"prev_post":{"title":"深度学习GPU服务器环境配置","uid":"689325bb08ea34f3ae386de22ecde592","slug":"深度学习GPU服务器环境配置","date":"2019-07-12T03:27:54.000Z","updated":"2021-07-08T11:44:18.562Z","comments":true,"path":"api/articles/深度学习GPU服务器环境配置.json","keywords":null,"cover":"../img/GPU环境配置/cover.jpeg","text":"这几天在跑深度学习有关的代码，弄了一个GPU，找了很多博客去了解如何使用配置才可以使我的代码可以使用GPU去跑。在这一天的忙碌中，终于在晚上把这事搞定了。或许大家会疑惑一个”简单”配置为什么要搞这么久，-_-|| 因为大多资料都是关于Ubuntu系统的配置，关于Centos的资料...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"深度学习","slug":"深度学习","count":2,"path":"api/categories/深度学习.json"}],"tags":[{"name":"环境配置","slug":"环境配置","count":2,"path":"api/tags/环境配置.json"},{"name":"GPU服务器","slug":"GPU服务器","count":1,"path":"api/tags/GPU服务器.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}},"next_post":{"title":"SpringCloud","uid":"2fdfe1e1ace8a4912a23a4cbc1c92824","slug":"SpringCloud","date":"2019-06-06T03:26:21.000Z","updated":"2021-07-08T11:48:43.304Z","comments":true,"path":"api/articles/SpringCloud.json","keywords":null,"cover":"../img/SpringCloud/cover.jpeg","text":"本文中我们主要介绍微服务开发框架——Spring Cloud。尽管Spring Cloud带有”Cloud”的字样，但它并不是云计算解决方案，而是Spring Boot的基础上构建的，用于快速构建分布式系统的通用模式的工具集。 Spring Cloud的特点Spring Clou...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Microservice","slug":"Microservice","count":2,"path":"api/tags/Microservice.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}}}