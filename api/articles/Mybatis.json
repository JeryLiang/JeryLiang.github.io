{"title":"Mybatis","uid":"54e1d69dbe01003cc0c2e45b21bc6b3e","slug":"Mybatis","date":"2018-11-24T07:00:52.000Z","updated":"2021-07-01T07:20:45.933Z","comments":true,"path":"api/articles/Mybatis.json","keywords":null,"cover":"../img/Mybatis/cover.jpeg","content":"<h4 id=\"一-Mybatis\"><a href=\"#一-Mybatis\" class=\"headerlink\" title=\"一.Mybatis\"></a>一.Mybatis</h4><p>1.Hibernate全表映射，而Mybatis半自动映射且可配置动态SQL</p>\n<p>2.Mapper 是一个接口，而没有任何实现类，它的作用是发送SQL，然后返回我们需要的结果，或者执行SQL从而修改数据库的数据。</p>\n<p>3.Mybatis别名（typeAliases）不区分大小写；</p>\n<p>4.typeHandler自定义类型转换器；</p>\n<h4 id=\"二-映射器\"><a href=\"#二-映射器\" class=\"headerlink\" title=\"二.映射器\"></a>二.映射器</h4><p>1.首先定义映射器接口（方法调用的地方），其次给出XML文件（SQL语句书写的地方），最后引入映射器，引入映射器的方法有如下几种，假设<code>roleMapper.xml</code> 在<code>mapper</code> 这个包下，接口类为<code>RoleMapper</code> 同样接口类也在<code>mapper</code> 这个包下：</p>\n<p>1)用文件路径引入映射器，</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;mappers&gt;\n &lt;mapper resource&#x3D;&quot;mapper&#x2F;roleMapper.xml&quot;&#x2F;&gt;\n&lt;&#x2F;mappers&gt;</code></pre>\n<p>2)用包名引入映射器，</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;mappers&gt;\n &lt;mapper resource&#x3D;&quot;mapper&#x2F;&gt;\n&lt;&#x2F;mappers&gt;</code></pre>\n<p>3)用类注册器引入映射器，</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;mappers&gt;\n &lt;mapper resource&#x3D;&quot;mapper&#x2F;RoleMapper&quot;&#x2F;&gt;\n&lt;&#x2F;mappers&gt;</code></pre>\n<p>4)用别的xml配置文件引入映射器，</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;mappers&gt;\n &lt;mapper url&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;mapper&#x2F;roleMapper&quot;&gt;\n&lt;&#x2F;mappers&gt;</code></pre>\n<p>2.在映射器中可以定义的元素名称如下：</p>\n<p><img src=\"../img/Mybatis/1.png\" alt=\"映射器配置元素\"></p>\n<p><img src=\"../img/Mybatis/2.png\" alt=\"映射器配置元素续表\"></p>\n<p>select中的元素resultType 和resultMap不能同时使用；</p>\n<p>3.自动映射 <strong>autoMappingBehavior</strong></p>\n<p>这个参数，当它不设置为NONE时，Mybatis会提供自动映射功能，只要返回的SQL列明和JavaBean的属性一致，Mybatis就会帮助我们回填这些字段而无需任何配置。自动映射可以在配置文件中的setting元素中配置 autoMappingBehavior属性来设置其策略：</p>\n<p>1）NONE，取消自动映射；</p>\n<p>2）PARTIAL，只会自动映射，没有定义嵌套结果集映射的结果集(没设置该属性时这个属性为默认值)；</p>\n<p>3）FULL，会自动映射任意复杂的结果集（无论是否嵌套）。</p>\n<p>4.sql元素</p>\n<p><img src=\"../img/Mybatis/3.png\" alt=\"SQL元素\"></p>\n<p>sql元素的主要作用是避免多次查询的时候重复写字段名，通过设置上图所示代码段<sql></sql>来定义查询的字段，其中id属性是为了在select语句中引用该元素。<include/>标签引用sql元素，refid属性的值对应要引用的sql元素的id名。</p>\n<p>5.resultMap</p>\n<p>resultMap元素中的id元素是表示哪个列是主键。</p>\n<p>6.级联</p>\n<p>级联中存在三种对应关系：一对一、一对多和多对多的关系。</p>\n<p>1）association一对一级联：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;resultMap id&#x3D;&quot;&quot; type&#x3D;&quot;&quot;&gt;\n ....\n &lt;association property&#x3D;&quot;&quot; colum&#x3D;&quot;&quot; select&#x3D;&quot;&quot;&gt;\n ....\n&lt;&#x2F;resultMap&gt;</code></pre>\n<p>注：级联即在经过一次select语句后返回结果后再调用一次resultMap中相应的select语句，其中association属性中的property为当前类的某个属性值 ， colum为直指定传递给select语句的参数，select中对应的为另一个select的路径与id，若调用的为当前Mapper下的select则直接值为id，若为另一个Mapper的则要给出路径与id。</p>\n<p>2）collection一对多级联：</p>\n<p>collection的属性值设置与association的一致，都有property、colum和select。</p>\n<p>3）discriminator鉴别级级联：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;resultMap id&#x3D;&quot;&quot; type&#x3D;&quot;&quot;&gt;\n ....\n &lt;discriminator javaType&#x3D;&quot;&quot; colum&#x3D;&quot;&quot; &gt;\n &lt;case value&#x3D;&quot;&quot; resultMap&#x3D;&quot;&quot;&#x2F;&gt;\n &lt;case value&#x3D;&quot;&quot; resultMap&#x3D;&quot;&quot;&#x2F;&gt;\n &lt;&#x2F;discriminator&gt;\n ....\n&lt;&#x2F;resultMap&gt;</code></pre>\n<h4 id=\"三-动态SQL\"><a href=\"#三-动态SQL\" class=\"headerlink\" title=\"三.动态SQL\"></a>三.动态SQL</h4><p>MyBatis的动态SQL包括以下几种元素：</p>\n<p><img src=\"../img/Mybatis/4.png\" alt=\"image\"></p>\n<p>1.if元素示例如下，其中接收参数时判定其是否为空应该用**_paremeter** 而不是用传入的参数名（如本例传入的roleName判空时应该用_parameter进行代替,而不是roleName，是因为我们接收参数的parameterType=”string”类型，而不是javaBean）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;select id&#x3D;&quot;findRole&quot; parameterType&#x3D;&quot;String&quot; resultMap&#x3D;&quot;roleMap&quot;&gt;\n select *from t_role where 1&#x3D;1\n &lt;if test&#x3D;&quot;_parameter !&#x3D;null &quot;&gt;\n and role_name like concat(&#39;%&#39;,#&#123;roleName&#125;,&#39;%&#39;)\n &lt;&#x2F;if&gt;\n &lt;&#x2F;select&gt;</code></pre>\n<p>2.choose、when、otherwise元素</p>\n<p>以上三种元素类似于switch….case….default 语句，parameter=”role” ,role 是一个javaBean ，所以判段为不为空时可以直接使用属性名判定（如下）where元素的条件：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;select id&#x3D;&quot;findRole&quot; parameterType&#x3D;&quot;role&quot; resultMap&#x3D;&quot;roleMap&quot;&gt;\nselect *from t_role where 1&#x3D;1\n&lt;choose&gt;\n&lt;when test&#x3D;&quot;roleNo !&#x3D; null and roleNo !&#x3D; &#39;&#39;&quot;&gt;\nand role_no &#x3D; #&#123;roleNo&#125;\n&lt;&#x2F;when&gt;\n&lt;when test&#x3D;&quot;roleName  !&#x3D; null and roleName !&#x3D;&#39;&#39;&quot;&gt;\nand role_name like concat(&#39;%&#39;,#&#123;roleName&#125;,&#39;%&#39;)\n&lt;&#x2F;when&gt;\n&lt;otherwise&gt;\nand note is not null\n&lt;&#x2F;otherwise&gt;\n&lt;&#x2F;choose&gt;\n&lt;&#x2F;select&gt;</code></pre>\n<ol>\n<li><p>trim 、where、 set 元素</p>\n<p> set元素的使用，可以更新全部，也可以更新部分值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;update id&#x3D;&quot;updateRole&quot; parameterType&#x3D;&quot;role&quot;&gt;\n update t_role \n &lt;set&gt;\n &lt;if test&#x3D;&quot;roleName !&#x3D; null and roleName !&#x3D;&#39;&#39;&quot;&gt;\n role_name &#x3D; #&#123;roleName&#125;,\n &lt;&#x2F;if&gt;\n &lt;if test&#x3D;&quot;note!&#x3D;null and note !&#x3D; &#39;&#39;&quot;&gt;\n note &#x3D; #&#123;note&#125;\n &lt;&#x2F;if&gt;\n &lt;&#x2F;set&gt;\n where role_no &#x3D; #&#123;roleNo&#125;\n&lt;&#x2F;update&gt;</code></pre>\n<p>trim的prefix代表的是语句的前缀，而prefixOverrides代表的是你需要去掉的那种字符串。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;select id&#x3D;&quot;findRole&quot; parameterType&#x3D;&quot;role&quot; resultMap&#x3D;&quot;roleMap&quot;&gt;\nselect *from t_role \n&lt;trim prefix&#x3D;&quot;where&quot; prefixOverrides&#x3D;&quot;and&quot;&gt;\n&lt;if test&#x3D;&quot;roleName !&#x3D; null and roleName !&#x3D;&#39;&#39;&quot;&gt;\nand role_name like concat(&#39;%&#39;,#&#123;roleName&#125;,&#39;%&#39;)\n&lt;&#x2F;if&gt;\n&lt;&#x2F;trim&gt;\n&lt;&#x2F;select&gt;</code></pre></li>\n<li><p>foreach元素</p>\n</li>\n</ol>\n<p>foreach元素是一个循环语句，它的作用是遍历集合。(下例中的user为javaBean)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;select id&#x3D;&quot;findUserBySex&quot; resultType&#x3D;&quot;user&quot;&gt;\n select * from t_user where sex in\n &lt;foreach item&#x3D;&quot;sex&quot; index&#x3D;&quot;index&quot;  collection&#x3D;&quot;list&quot; open&#x3D;&quot;(&quot;  separator&#x3D;&quot;,&quot; close&#x3D;&quot;)&quot;&gt;\n #&#123;sex&#125;\n &lt;&#x2F;foreach&gt;\n&lt;&#x2F;select&gt;</code></pre>\n<ul>\n<li><p>  collection 配置的sexList 是传递进来的参数名称，它可以是一个数组或者List、Set等集合；如果是list类型collection属性值需要为list ，如果是数组类型collection属性值为array,</p>\n</li>\n<li><p>  item配置的是循环中当前元素别名；</p>\n</li>\n<li><p>  index配置的是当前元素在集合的位置下标；</p>\n</li>\n<li><p>  open和close配置的是以什么符号将这些集合元素包装起来；</p>\n</li>\n<li><p>  separator 是各元素的间隔符。</p>\n</li>\n</ul>\n<p>5.bin元素</p>\n<p>bin元素的作用是通过OGNL表达式去自定义一个上下文变量。（作用类似与mysql中的concat拼接模糊查找，但其同样可以在oracle数据库中使用，提高了可移植性）</p>\n<p>使用bin模糊查询(其中_parameter代表接收到的参数)：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;select id&#x3D;&quot;findRole&quot; resultType&#x3D;&quot;Role&quot;&gt;\n &lt;bind name&#x3D;&quot;pattern&quot; value&#x3D;&quot;&#39;%&#39;+_parameter+&#39;%&#39;&quot;&#x2F;&gt;\n SELECT * FROM t_role where role_name like #&#123;pattern&#125;\n&lt;&#x2F;select&gt;</code></pre>\n<p>以上只是单个参数的绑定，下面我们举例绑定多个参数的模糊查询：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;mapper接口\npublic List&lt;RoleBean&gt; findRole (@Param(&quot;roleName&quot;)String roleName,@Param(&quot;note&quot;)String note);\n&#x2F;&#x2F;mapper.xml\n&lt;select id&#x3D;&quot;findRole&quot; resultType&#x3D;&quot;Role&quot;&gt;\n &lt;bind name&#x3D;&quot;pattern_roleName&quot; value&#x3D;&quot;&#39;%&#39;+roleName+&#39;%&#39;&quot;&#x2F;&gt;\n &lt;bind name&#x3D;&quot;pattern_note&quot; value&#x3D;&quot;&#39;%&#39;+note+&#39;%&#39;&quot;&#x2F;&gt;\n SELECT *FROM t_role where role_name like #&#123;pattern_roleName&#125;\n and note like #&#123;pattern_note&#125;\n&lt;&#x2F;select&gt;</code></pre>\n","text":"一.Mybatis1.Hibernate全表映射，而Mybatis半自动映射且可配置动态SQL 2.Mapper 是一个接口，而没有任何实现类，它的作用是发送SQL，然后返回我们需要的结果，或者执行SQL从而修改数据库的数据。 3.Mybatis别名（typeAliases）不区...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"mybatis","slug":"mybatis","count":1,"path":"api/tags/mybatis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80-Mybatis\"><span class=\"toc-text\">一.Mybatis</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E6%98%A0%E5%B0%84%E5%99%A8\"><span class=\"toc-text\">二.映射器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E5%8A%A8%E6%80%81SQL\"><span class=\"toc-text\">三.动态SQL</span></a></li></ol>","author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"mapped":true,"prev_post":{"title":"Jenkins持续集成","uid":"03262ebd7a1c2d262927581eaf4e7b3b","slug":"Jenkins持续集成","date":"2018-11-24T07:56:32.000Z","updated":"2021-07-05T03:19:53.739Z","comments":true,"path":"api/articles/Jenkins持续集成.json","keywords":null,"cover":"../img/Jenkins持续集成/cover.jpeg","text":" 什么是Jenkins？ Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomca...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"CI","slug":"CI","count":1,"path":"api/tags/CI.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}},"next_post":{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"Docker","date":"2018-11-24T06:15:13.000Z","updated":"2021-08-13T07:56:07.687Z","comments":true,"path":"api/articles/Docker.json","keywords":null,"cover":"../img/Docker/cover.jpeg","text":"什么是Docker? Docker是基于Go语言实现的云开源项目。Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或者数据库应用等...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"feature":false}}