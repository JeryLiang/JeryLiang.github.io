{"title":"SSM整合redis","uid":"c36c9697172955c6c9f9103f2df4da81","slug":"SSM整合redis","date":"2019-04-16T06:52:59.000Z","updated":"2021-07-01T08:05:04.356Z","comments":true,"path":"api/articles/SSM整合redis.json","keywords":null,"cover":"../img/SSM整合redis/cover.jpeg","content":"<h4 id=\"1-新建redis-properties\"><a href=\"#1-新建redis-properties\" class=\"headerlink\" title=\"1.新建redis.properties\"></a>1.新建redis.properties</h4><p>在classpath下创建redis.properties，内容如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis.host&#x3D;连接的redis服务器ip地址\nredis.port&#x3D;6379   &#x2F;&#x2F;端口号\nredis.password&#x3D;   &#x2F;&#x2F;你的redis密码\nredis.dbIndex&#x3D;0   &#x2F;&#x2F;db索引，即使用哪个db\nredis.maxIdle&#x3D;50  \nredis.maxTotal&#x3D;100\nredis.maxWaitMillis&#x3D;3000\nredis.testOnBorrow&#x3D;true\nredis.timeout&#x3D;5000\nredis.expiration&#x3D;20 &#x2F;&#x2F;设置关键字过期时间</code></pre>\n<h4 id=\"2-新建spring-redis-xml\"><a href=\"#2-新建spring-redis-xml\" class=\"headerlink\" title=\"2.新建spring-redis.xml\"></a>2.新建spring-redis.xml</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:util&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&quot;\n       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot; xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\n             http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\n             http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util\n             http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&#x2F;spring-util.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;\n\n    &lt;context:property-placeholder location&#x3D;&quot;classpath:redis.properties&quot;&#x2F;&gt;\n\n    &lt;bean id&#x3D;&quot;poolConfig&quot; class&#x3D;&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;\n        &lt;property name&#x3D;&quot;maxIdle&quot; value&#x3D;&quot;$&#123;redis.maxIdle&#125;&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;maxTotal&quot; value&#x3D;&quot;$&#123;redis.maxTotal&#125;&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;maxWaitMillis&quot; value&#x3D;&quot;$&#123;redis.maxWaitMillis&#125;&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;testOnBorrow&quot; value&#x3D;&quot;$&#123;redis.testOnBorrow&#125;&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!-- 配置JedisConnectionFactory --&gt;\n    &lt;bean id&#x3D;&quot;jedisConnectionFactory&quot;\n          class&#x3D;&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&gt;\n        &lt;property name&#x3D;&quot;hostName&quot; value&#x3D;&quot;$&#123;redis.host&#125;&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;port&quot; value&#x3D;&quot;$&#123;redis.port&#125;&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;redis.password&#125;&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;database&quot; value&#x3D;&quot;$&#123;redis.dbIndex&#125;&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;poolConfig&quot; ref&#x3D;&quot;poolConfig&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!-- 配置RedisTemplate --&gt;\n    &lt;bean id&#x3D;&quot;redisTemplate&quot; class&#x3D;&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;\n        &lt;property name&#x3D;&quot;connectionFactory&quot; ref&#x3D;&quot;jedisConnectionFactory&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!-- 配置RedisCacheManager --&gt;\n    &lt;bean id&#x3D;&quot;redisCacheManager&quot; class&#x3D;&quot;org.springframework.data.redis.cache.RedisCacheManager&quot;&gt;\n        &lt;constructor-arg name&#x3D;&quot;redisOperations&quot; ref&#x3D;&quot;redisTemplate&quot; &#x2F;&gt;\n        &lt;property name&#x3D;&quot;defaultExpiration&quot; value&#x3D;&quot;$&#123;redis.expiration&#125;&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n    &lt;!-- 配置RedisCacheConfig --&gt;\n    &lt;bean id&#x3D;&quot;redisCacheConfig&quot; class&#x3D;&quot;com.trace.app.framework.utils.RedisUtil&quot;&gt;\n        &lt;constructor-arg ref&#x3D;&quot;jedisConnectionFactory&quot; &#x2F;&gt;\n        &lt;constructor-arg ref&#x3D;&quot;redisTemplate&quot; &#x2F;&gt;\n        &lt;constructor-arg ref&#x3D;&quot;redisCacheManager&quot; &#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;\n</code></pre>\n<p>并将该配置文件引入启动配置文件中，如我的是application_context.xml，因为该文件在web.xml做了如下引用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;&#x2F;WEB-INF&#x2F;spring&#x2F;application_context.xml&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;context-param&gt;</code></pre>\n<p>所以我将spring-redis.xml引入application_context.xml中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;import resource&#x3D;&quot;路径&#x2F;spring-redis.xml&quot;&#x2F;&gt;  &#x2F;&#x2F;其中，路径可以是相对的也可以是绝对的</code></pre>\n\n<h4 id=\"3-创建RedisUtil-class\"><a href=\"#3-创建RedisUtil-class\" class=\"headerlink\" title=\"3.创建RedisUtil.class\"></a>3.创建RedisUtil.class</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * @Author: JerryLiang\n * @Date: 2019&#x2F;4&#x2F;16 10:00\n **&#x2F;\n@Component\npublic class RedisUtil &#123;\n\n    private volatile JedisConnectionFactory jedisConnectionFactory;\n    private volatile RedisTemplate&lt;String,String&gt; redisTemplate;\n    private volatile RedisCacheManager redisCacheManager;\n\n    private static Logger logger &#x3D; Logger.getLogger(&quot;RedisUtil&quot;);\n\n    public RedisUtil() &#123;\n        super();\n    &#125;\n    public RedisUtil(JedisConnectionFactory jedisConnectionFactory, RedisTemplate&lt;String, String&gt; redisTemplate,\n                     RedisCacheManager redisCacheManager ) &#123;\n        this.jedisConnectionFactory &#x3D; jedisConnectionFactory;\n        this.redisTemplate &#x3D; redisTemplate;\n        this.redisCacheManager &#x3D; redisCacheManager;\n    &#125;\n\n    public JedisConnectionFactory getJedisConnecionFactory() &#123;\n        return jedisConnectionFactory;\n    &#125;\n\n    public RedisTemplate&lt;String, String&gt; getRedisTemplate() &#123;\n        return redisTemplate;\n    &#125;\n\n\n    &#x2F;**\n     * 指定缓存失效时间\n     * @param key 键\n     * @param time 时间(秒)\n     *&#x2F;\n    public boolean expire(String key, long time) &#123;\n     &#x2F;&#x2F;   logger.info(&quot;set-expire-start&quot;);\n        try&#123;\n            if(time &gt; 0)&#123;\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n      &#x2F;&#x2F;          logger.info(&quot;set-expire-success&quot;);\n            &#125;\n            return true;\n        &#125;catch (Exception e)&#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;**\n     * 普通缓存获取\n     *\n     * @param key 键\n     * @return 值\n     *&#x2F;\n    public Object get(String key) &#123;\n        return key &#x3D;&#x3D; null ? null : redisTemplate.opsForValue().get(key);\n    &#125;\n\n    &#x2F;**\n     *  判断key是否存在\n     * @param key 键\n     * @return true 存在 false 不存在\n     *&#x2F;\n    public boolean hasKey(String key)&#123;\n        try&#123;\n        &#x2F;&#x2F;    logger.info(&quot;SessionId: &quot; + key);\n            return redisTemplate.hasKey(key);\n        &#125;catch (Exception e)&#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;**\n     *  删除缓存\n     * @param key\n     *&#x2F;\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public boolean del(String key)&#123;\n        if (key.equals(&quot;&quot;)|| key&#x3D;&#x3D;null) &#123;\n            return false;\n        &#125;else&#123;\n            redisTemplate.delete(key);\n            return true;\n        &#125;\n    &#125;\n\n    &#x2F;**\n     * 普通缓存放入\n     *\n     * @param key   键\n     * @param value 值\n     * @return true成功 false失败\n     *&#x2F;\n    public boolean set(String key, String value) &#123;\n        try &#123;\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 普通缓存放入并设置时间\n     *\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     * @return true成功 false 失败\n     *&#x2F;\n    public boolean set(String key, String value, long time) &#123;\n      &#x2F;&#x2F;  logger.info(&quot;set-session-key-start&quot;);\n        try &#123;\n            if (time &gt; 0) &#123;\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            &#125; else &#123;\n                set(key, value);\n            &#125;\n        &#x2F;&#x2F;    logger.info(&quot;set-session-key-success&quot;);\n            return true;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;**\n     * 根据key 获取过期时间\n     *\n     * @param key 键 不能为null\n     * @return 时间(秒) 返回0代表为永久有效\n     *&#x2F;\n    public long getExpire(String key) &#123;\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n    &#125;\n\n&#125;</code></pre>\n<h4 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h4><p>将RedisUtil注入到我们需要使用的控制层中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Autowired\nprivate RedisUtil redisUtil;</code></pre>\n<p>调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">redisUtil.set(&quot;test&quot;,&quot;ssm&quot;)</code></pre>\n<p>查看结果<br><img src=\"../img/SSM%E6%95%B4%E5%90%88redis/1.png\" alt=\"image.png\"></p>\n","text":"1.新建redis.properties在classpath下创建redis.properties，内容如下： redis.host&#x3D;连接的redis服务器ip地址 redis.port&#x3D;6379 &#x2F;&#x2F;端口号 redis.password&...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"SSM","slug":"SSM","count":1,"path":"api/tags/SSM.json"},{"name":"redis","slug":"redis","count":2,"path":"api/tags/redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%96%B0%E5%BB%BAredis-properties\"><span class=\"toc-text\">1.新建redis.properties</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%96%B0%E5%BB%BAspring-redis-xml\"><span class=\"toc-text\">2.新建spring-redis.xml</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BARedisUtil-class\"><span class=\"toc-text\">3.创建RedisUtil.class</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4.测试</span></a></li></ol>","author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/img_convert/71d174e6f2050f828d65a741734d6e0c.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"mapped":true,"prev_post":{"title":"Jenkins一键分布式部署springboot项目","uid":"39ee3696f69f748c543c33dca389e052","slug":"Jenkins一键分布式部署springboot项目","date":"2019-05-13T06:53:30.000Z","updated":"2021-08-13T07:56:10.376Z","comments":true,"path":"api/articles/Jenkins一键分布式部署springboot项目.json","keywords":null,"cover":"../img/Jenkins一键分布式部署springboot项目/cover.jpeg","text":"一、安装与启动可参考我的上一篇关于jenkins的博客：https://www.jianshu.com/p/cfdf0d90185e 二、插件准备1.maven项目插件 查看系统管理–&gt;插件管理–&gt;已安装插件中，过滤框中输入Maven Integration plug...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"Jenkins","slug":"Jenkins","count":1,"path":"api/tags/Jenkins.json"},{"name":"Springboot","slug":"Springboot","count":1,"path":"api/tags/Springboot.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/img_convert/71d174e6f2050f828d65a741734d6e0c.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}},"next_post":{"title":"LAMP环境搭建","uid":"95078be12975a222d9293ee317802e05","slug":"LAMP环境搭建","date":"2019-04-06T06:52:46.000Z","updated":"2021-07-01T07:57:51.290Z","comments":true,"path":"api/articles/LAMP环境搭建.json","keywords":null,"cover":"../img/LAMP环境搭建/cover.jpeg","text":"前言Centos7下LAMP的环境搭建！后续会带来集成LNMP的环境搭建！版本：Apache(httpd-2.4.38)+MySQL-5.7.24+PHP-7.1.26 第一步：配置防火墙 1.开放80和3306端口：firewall-cmd –zone=public –add-...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"LAMP","slug":"LAMP","count":1,"path":"api/tags/LAMP.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/img_convert/71d174e6f2050f828d65a741734d6e0c.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}}}