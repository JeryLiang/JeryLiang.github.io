{"title":"Jenkins持续集成","uid":"03262ebd7a1c2d262927581eaf4e7b3b","slug":"Jenkins持续集成","date":"2018-11-24T07:56:32.000Z","updated":"2021-07-05T03:19:53.739Z","comments":true,"path":"api/articles/Jenkins持续集成.json","keywords":null,"cover":"../img/Jenkins持续集成/cover.jpeg","content":"<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/1.png\" alt=\"image\"> </p>\n<h4 id=\"什么是Jenkins？\"><a href=\"#什么是Jenkins？\" class=\"headerlink\" title=\"什么是Jenkins？\"></a><strong>什么是Jenkins？</strong></h4><hr>\n<p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。  通常与版本管理工具(SCM)、构建工具结合使用；常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。</p>\n<h4 id=\"Jenkins两大特性\"><a href=\"#Jenkins两大特性\" class=\"headerlink\" title=\"Jenkins两大特性\"></a><strong>Jenkins两大特性</strong></h4><hr>\n<p><strong>1.持续集成</strong>（<code>Continuous integration, CI</code>）</p>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/2.png\" alt=\"image\"> </p>\n<p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。</p>\n<p>持续集成有以下几个优点：</p>\n<ul>\n<li><p>  从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，减少人工干预；</p>\n</li>\n<li><p>  任何时间、任何地点生成可部署的软件，出现问题，项目成员会被马上通知到，问题第一时间修复；</p>\n</li>\n<li><p>  增强项目可见性，有效的控制台日志能帮助我们更好的解决存在的问题。</p>\n</li>\n</ul>\n<p><strong>2.持续交付</strong>（<code>Continuous delivery, CD</code>）</p>\n<p>持续交付则是经典的敏捷的软件开发方法的自然延伸，它强调产品在修改后到部署上线的流程要敏捷话、自动化。甚至一些较小的改变也要尽早的部署上线。通俗的讲可以有几个特点：</p>\n<ul>\n<li><p>  代码越早交付出去，用户越早能用到，快就是商业价值；</p>\n</li>\n<li><p>  用户反馈能及时作出处理，能帮助产品市场人员调整测策略；</p>\n</li>\n<li><p>  降低修改成本。</p>\n</li>\n</ul>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/3.png\" alt=\"image\"> </p>\n<h4 id=\"前后对比\"><a href=\"#前后对比\" class=\"headerlink\" title=\"前后对比\"></a><strong>前后对比</strong></h4><hr>\n<p><strong>1.传统的项目部署</strong></p>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/4.png\" alt=\"image\"> </p>\n<p><strong>2.持续部署</strong></p>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/5.png\" alt=\"image\"> </p>\n<h4 id=\"Jekins的安装\"><a href=\"#Jekins的安装\" class=\"headerlink\" title=\"Jekins的安装\"></a><strong>Jekins的安装</strong></h4><hr>\n<p>官方下载地址：<a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a></p>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/6.png\" alt=\"image\"> </p>\n<p>我选择下载的war包，将war包用xftps传到自己的服务器后有两种方式可以启动jenkins：</p>\n<p>第一种：  ​  将war包移至tomcat/webapps下，启动tomcat  ​  浏览器输入: 你的IP地址:tomcat开放的端口号</p>\n<p>第二种：</p>\n<p>进入你war包存放的位置，输入以下指令后台启动jenkins：</p>\n<p><code>nohup java -jar jenkins.war --logfile=server.log --httpPort=8088 &gt; server.log 2&gt;&amp; 1 &amp; </code></p>\n<p>默认情况不指定<code>--httpPort</code>的话jenkins使用的是8080端口，在此我指定的端口是8088</p>\n<h4 id=\"Jenkins的配置\"><a href=\"#Jenkins的配置\" class=\"headerlink\" title=\"Jenkins的配置\"></a><strong>Jenkins的配置</strong></h4><hr>\n<p>以下为Jenkins的主界面：</p>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/7.png\" alt=\"image\"> </p>\n<p>其中主要的配置都是在<code>系统管理</code>中设置：</p>\n<ul>\n<li><p>  在<code>系统设置</code>里设置全局设置相关的内容；</p>\n</li>\n<li><p>  在<code>全局安全配置</code>里配置各用户权限；</p>\n</li>\n<li><p>  在全局工具里配置相应的项目运行环境，比如JDK，MAVEN等；</p>\n</li>\n<li><p>  在插件管理中添加自己想要使用的插件；</p>\n</li>\n<li><p>  在节点管理中管理自己的服务器集群。</p>\n</li>\n</ul>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/8.png\" alt=\"image\"> </p>\n<h5 id=\"全局工具配置\"><a href=\"#全局工具配置\" class=\"headerlink\" title=\"全局工具配置\"></a><strong>全局工具配置</strong></h5><hr>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/9.png\" alt=\"image\"> </p>\n<p>配置JDK、Git、Maven等路径。</p>\n<h5 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a><strong>插件管理</strong></h5><hr>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/10.png\" alt=\"image\"> </p>\n<p>在插件管理中插件类型众多，很大程度的满足了我们的需求，可以选择自己需要使用的插件，也可以制作相应的插件上传。</p>\n<p>常用的插件：<br><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/11.png\" alt=\"image\"> </p>\n<p>主要介绍以下几个插件：</p>\n<p><code>GitHub Branch Source Plugin</code> ：代码仓库；</p>\n<p><code>Deploy to container Plugin</code> ：部署代码至相应的容器；</p>\n<p><code>Maven Integration Plugin</code> ：构建Maven项目需要使用此插件；</p>\n<p><code>SSH Plugin</code> 和 <code>SSH Slave Plugin</code> ：配置免密登录某一节点需要使用到；</p>\n<h5 id=\"节点管理\"><a href=\"#节点管理\" class=\"headerlink\" title=\"节点管理\"></a><strong>节点管理</strong></h5><hr>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/12.png\" alt=\"image\"> </p>\n<h4 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a><strong>新建项目</strong></h4><hr>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/13.png\" alt=\"image\"> </p>\n<p>选择需要怎样构建一个项目，在此以构建一个自由风格的软件项目为例。</p>\n<h5 id=\"源码管理\"><a href=\"#源码管理\" class=\"headerlink\" title=\"源码管理\"></a><strong>源码管理</strong></h5><hr>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/14.png\" alt=\"image\"> </p>\n<p>设置仓库url，构建时从此仓库获得源码。这里不仅可以使用Git源码管理，同样可以使用SVN，Coding等别的仓库，需要下载相应的插件。</p>\n<h5 id=\"构建触发器\"><a href=\"#构建触发器\" class=\"headerlink\" title=\"构建触发器\"></a><strong>构建触发器</strong></h5><hr>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/15.png\" alt=\"image\"><br>构建触发器是指以何种方式来触发自动构建：</p>\n<ul>\n<li>  第一种：触发远程构建（例如，使用脚本）</li>\n</ul>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/16.png\" alt=\"image\"> </p>\n<p>图中的身份证令牌（TOKEN_NAME）即为要触发构建需要的KEY，访问URL中加入key后才可自动触发自动构建。</p>\n<ul>\n<li><p>  第二种：在其他工程构建后触发；</p>\n</li>\n<li><p>  第三种：定时构建；</p>\n</li>\n<li><p>  第四种：GitHub hook trigger for GITScm polling，使用github上的webhook钩子来实现代码push时，发送相应的请求，该请求即为我们触发自动构建的URL加key;</p>\n</li>\n<li><p>  第五种：轮询SCM，</p>\n</li>\n</ul>\n<h5 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a><strong>构建</strong></h5><hr>\n<p>此处选择的是执行相应的shell命令：</p>\n<p><img src=\"../img/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/17.png\" alt=\"image\"> </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">BUILD_ID&#x3D;DONTKILLME\n. &#x2F;etc&#x2F;profile\nexport PROJ_PATH&#x3D;pwd\nexport TOMCAT_APP_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-8.5.34\n\nsh $PROJ_PATH&#x2F;order&#x2F;deploy.sh</code></pre>\n<p>其中前四句指令是在<code>/etc/profile/</code>路径下添加PROJ_PATH（项目路径）的环境配置，TOMVAT_APP_PATH（tomcat路径），最后一个是执行项目中的脚本。</p>\n","text":" 什么是Jenkins？ Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomca...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"CI","slug":"CI","count":1,"path":"api/tags/CI.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFJenkins%EF%BC%9F\"><span class=\"toc-text\">什么是Jenkins？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Jenkins%E4%B8%A4%E5%A4%A7%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">Jenkins两大特性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E5%90%8E%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">前后对比</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Jekins%E7%9A%84%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Jekins的安装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Jenkins%E7%9A%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Jenkins的配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">全局工具配置</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">插件管理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%8A%82%E7%82%B9%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">节点管理</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">新建项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">源码管理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8\"><span class=\"toc-text\">构建触发器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">构建</span></a></li></ol></li></ol>","author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"mapped":true,"prev_post":{"title":"Springboot超详细搭建过程","uid":"aaca0be6401ddc4b6b987223429803e8","slug":"Springboot超详细搭建过程","date":"2019-03-17T07:00:41.000Z","updated":"2021-07-01T07:30:11.008Z","comments":true,"path":"api/articles/Springboot超详细搭建过程.json","keywords":null,"cover":"../img/Springboot超详细搭建过程/cover.jpeg","text":"一、创建篇 新建项目，如下图所示。 选择Spring Initializr。 填写Group、Artifact和Name后点击next，如下图所示。 选择需要的组件：基本组件有web模块中的web和web server、SQL模块中的MySQL、JDBC和Mybatis、额外的组...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":7,"path":"api/categories/Java.json"}],"tags":[{"name":"springboot","slug":"springboot","count":2,"path":"api/tags/springboot.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}},"next_post":{"title":"Mybatis","uid":"54e1d69dbe01003cc0c2e45b21bc6b3e","slug":"Mybatis","date":"2018-11-24T07:00:52.000Z","updated":"2021-07-01T07:20:45.933Z","comments":true,"path":"api/articles/Mybatis.json","keywords":null,"cover":"../img/Mybatis/cover.jpeg","text":"一.Mybatis1.Hibernate全表映射，而Mybatis半自动映射且可配置动态SQL 2.Mapper 是一个接口，而没有任何实现类，它的作用是发送SQL，然后返回我们需要的结果，或者执行SQL从而修改数据库的数据。 3.Mybatis别名（typeAliases）不区...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"Java","slug":"Java","count":7,"path":"api/categories/Java.json"}],"tags":[{"name":"mybatis","slug":"mybatis","count":1,"path":"api/tags/mybatis.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}}}