{"title":"Jenkins一键分布式部署springboot项目","uid":"39ee3696f69f748c543c33dca389e052","slug":"Jenkins一键分布式部署springboot项目","date":"2019-05-13T06:53:30.000Z","updated":"2021-07-01T08:12:32.887Z","comments":true,"path":"api/articles/Jenkins一键分布式部署springboot项目.json","keywords":null,"cover":"../img/Jenkins一键分布式部署springboot项目/cover.jpeg","content":"<h4 id=\"一、安装与启动\"><a href=\"#一、安装与启动\" class=\"headerlink\" title=\"一、安装与启动\"></a>一、安装与启动</h4><p>可参考我的上一篇关于jenkins的博客：<a href=\"https://www.jianshu.com/p/cfdf0d90185e\">https://www.jianshu.com/p/cfdf0d90185e</a></p>\n<h4 id=\"二、插件准备\"><a href=\"#二、插件准备\" class=\"headerlink\" title=\"二、插件准备\"></a>二、插件准备</h4><h5 id=\"1-maven项目插件\"><a href=\"#1-maven项目插件\" class=\"headerlink\" title=\"1.maven项目插件\"></a>1.maven项目插件</h5><ul>\n<li>查看系统管理–&gt;插件管理–&gt;已安装插件中，过滤框中输入<code>Maven Integration plugin</code>，搜索是否已安装Maven Integration plugin插件；</li>\n<li>若未安装，则可到<code>系统管理--&gt;插件管理--&gt;可选插件</code>中，过滤框中输入Maven Integration plugin，勾选中后点直接安装。</li>\n</ul>\n<h5 id=\"2-节点管理插件\"><a href=\"#2-节点管理插件\" class=\"headerlink\" title=\"2.节点管理插件\"></a>2.节点管理插件</h5><ul>\n<li>操作步骤同上，该插件名为<code>Publish Over SSH</code>。</li>\n</ul>\n<h4 id=\"三、配置系统设置\"><a href=\"#三、配置系统设置\" class=\"headerlink\" title=\"三、配置系统设置\"></a>三、配置系统设置</h4><h5 id=\"1-配置全局工具\"><a href=\"#1-配置全局工具\" class=\"headerlink\" title=\"1.配置全局工具\"></a>1.配置全局工具</h5><ul>\n<li>在<code>系统管理--&gt;全局工具配置</code>中，配置Maven、Git、Gradle或Docker等全局工具；</li>\n<li>这一步按需配置(本次例子只需要Maven)，这里以配置Maven为例，如下图；<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/1.png\" alt=\"maven配置\"></li>\n<li>由于我虚拟机上并没有安装maven，所以我选择使用的是自动安装。</li>\n</ul>\n<h5 id=\"2-系统设置\"><a href=\"#2-系统设置\" class=\"headerlink\" title=\"2.系统设置\"></a>2.系统设置</h5><ul>\n<li>jenkins Location:URL为我们虚拟机的ip地址加jenkins启动时开放的端口号(如下图)；<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/2.png\" alt=\"jenkins location\"></li>\n<li>SSH Server管理(如下图)：若需要多台，点新增再添加即可。需要注意的是，如果没有配置免密登录的话，需要点击高级，勾选<code>Use password authentication, or use a different key</code> ，并在<code>Passphrase/Password</code>这一栏中输入虚拟机远程登录密码。<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/3.png\" alt=\"ssh server配置\"></li>\n</ul>\n<h5 id=\"3-新建maven项目\"><a href=\"#3-新建maven项目\" class=\"headerlink\" title=\"3.新建maven项目\"></a>3.新建maven项目</h5><p><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/4.png\" alt=\"构建maven项目\"></p>\n<h5 id=\"4-设置\"><a href=\"#4-设置\" class=\"headerlink\" title=\"4.设置\"></a>4.设置</h5><ul>\n<li>设置项目的构建策略与仓库地址<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/5.png\" alt=\"General\"></li>\n<li>源码管理设置<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/6.png\" alt=\"源码管理\"></li>\n<li>其中Credentials添加如下：输入仓库用户名和密码，描述是为了区分该验证是什么(jenkins会保存一系列我们使用的credentials)可写可不写，推荐写<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/7.png\" alt=\"credentials设置\"></li>\n<li>构建触发器<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/8.png\" alt=\"构建触发器\"></li>\n<li>build与post steps设置，这里并没有跳过测试，所以会在构建的时候进行测试，若要跳过测试，可以在<code>clean install</code> 后加<code>-DskipTests</code><br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/9.png\" alt=\"build\"></li>\n<li>若不知道pom.xml在哪，可以先执行一次构建，构建会把代码克隆下来，我们可以在工作空间中看到，如下图所示<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/10.png\" alt=\"工作空间\"></li>\n<li>构建后操作中选择<code>Send build artifacts Over SSH</code>，因为我们在第2步系统设置中将SSH server远程工作目录为<code>/usr/local</code>，此处又将路径设置为<code>jenkins-jar/</code>，由此最终将jar包传输到服务器中的路径是<code>/usr/local/jenkins-jar</code><br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/11.png\" alt=\"选择构建后操作\"><br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/12.png\" alt=\"设置构建后操作\"></li>\n<li>上一步中的<code>Exec command</code>是我们要运行的执令，此处运行了我自己写的一个叫<code>hello.sh</code>的启动脚本，同样，如果我们要一次部署到多台服务器上的话，只需要点击<code>Add Transfer Set</code>再和上图一样设置另一台服务器即可；</li>\n<li>点击保存。</li>\n</ul>\n<h4 id=\"四、启动脚本编写\"><a href=\"#四、启动脚本编写\" class=\"headerlink\" title=\"四、启动脚本编写\"></a>四、启动脚本编写</h4><p>以上jenkins帮我们做了事情主要有如下几个：</p>\n<ul>\n<li>从仓库中克隆代码；</li>\n<li>maven的<code>clean install</code>；</li>\n<li>当build成功后，将相应的文件传输到我们指定的服务器中(此处传输的是jar包)；</li>\n<li>定时重复上述步骤。</li>\n</ul>\n<p>由此可见，jenkins并没有使我们项目启动起来，为此我们需要编写启动脚本。<br>脚本内容大致如下(欢迎指正^-^)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\nfunction killproject()\n&#123;\n#由于我这边多个项目jar包名一致了，所以并没有用 ps -ef | grep jar包名 来查进程id，而是通过端口号来查的\n  project_pid&#x3D;$(netstat -lnp | grep 18099|awk &#39;&#123;print $7&#125;&#39;|cut -d&#x2F; -f1)\n  if [  $project_pid &gt; 0 ];then\n        echo &quot;项目已经启动了，开始关闭项目，项目pid为: $project_pid &quot;\n        kill -9 $(netstat -lnp | grep 18099|awk &#39;&#123;print $7&#125;&#39;|cut -d&#x2F; -f1)\n        echo &#39;项目关闭成功，开始重启项目。。。&#39;\n  else\n        echo &quot;项目未启动，直接启动&quot;\n  fi\n&#125;\nfunction start_project()\n&#123;\n        source &#x2F;etc&#x2F;profile\n        echo &#39;正在启动项目。。。&#39;\n        cd &#x2F;usr&#x2F;local&#x2F;jenkins-jar&#x2F;\n        nohup java -jar demo-0.0.1-SNAPSHOT.jar &gt;warpper.log &amp;2&gt;1 &amp;\n\n&#125;\nfunction check_project()\n&#123;\n  check_pid&#x3D;$(netstat -lnp | grep 18099|awk &#39;&#123;print $7&#125;&#39;|cut -d&#x2F; -f1)\n  if [ $check_pid  &gt; 0 ];then\n        echo &quot;project is start and  pid &#x3D; : $check_pid  &quot;\n  else\n        echo &quot;project are not start&quot;\n  fi\n\n&#125;\nkillproject\nstart_project\nsleep 10\ncheck_project\n</code></pre>\n<p>代码分析，其中：</p>\n<ul>\n<li>killproject()函数作用是查看系统中该项目是否已启动，若已启动，则先kill掉该进程，再启动；若未启动，则直接启动；</li>\n<li>start_project()函数作用是进入我的jar包存储路径，并后台运行，函数中的<code>source /etc/profile</code>目的是使项目可以后台启动(其实我没加的时候，后台启动项目一直不能用，报错找不到java环境)；</li>\n<li>check_project()函数作用是检查项目是否正常启动，可以在jenkins控制台中看到输出信息；</li>\n<li>sleep 10是为了等待我的springboot启动完，然后我们查看它的进程id.</li>\n</ul>\n<h4 id=\"五、构建项目\"><a href=\"#五、构建项目\" class=\"headerlink\" title=\"五、构建项目\"></a>五、构建项目</h4><ul>\n<li>点击立即构建，就可以完成项目的自动部署了。<br><img src=\"../img/Jenkins%E4%B8%80%E9%94%AE%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/13.png\" alt=\"部分控制台输出\"></li>\n<li>进入到虚拟机中，使用<code>netstat -lnp | grep 18099</code>可以验证项目是否已启动。</li>\n<li>有时候可能会在控制台输出<code>project are not start</code>，我不是很清楚是否是我设置的睡眠时间短了(为此，我们初次测试可以去虚拟机中查看项目是否启动)。</li>\n</ul>\n<p>更新：sleep 10修改成 sleep 30s就好了，之前果然是睡眠时间太短了。</p>\n","feature":true,"text":"一、安装与启动可参考我的上一篇关于jenkins的博客：https://www.jianshu.com/p/cfdf0d90185e 二、插件准备1.maven项目插件 查看系统管理–&gt;插件管理–&gt;已安装插件中，过滤框中输入Maven Integration plug...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"Jenkins","slug":"Jenkins","count":1,"path":"api/tags/Jenkins.json"},{"name":"Springboot","slug":"Springboot","count":1,"path":"api/tags/Springboot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">一、安装与启动</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%8F%92%E4%BB%B6%E5%87%86%E5%A4%87\"><span class=\"toc-text\">二、插件准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-maven%E9%A1%B9%E7%9B%AE%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">1.maven项目插件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E8%8A%82%E7%82%B9%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">2.节点管理插件</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E9%85%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">三、配置系统设置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">1.配置全局工具</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">2.系统设置</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%96%B0%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">3.新建maven项目</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">4.设置</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99\"><span class=\"toc-text\">四、启动脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">五、构建项目</span></a></li></ol>","author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"mapped":true,"prev_post":{"title":"Jenkins持续集成","uid":"03262ebd7a1c2d262927581eaf4e7b3b","slug":"Jenkins持续集成","date":"2021-06-30T07:56:32.000Z","updated":"2021-07-01T06:38:26.718Z","comments":true,"path":"api/articles/Jenkins持续集成.json","keywords":null,"cover":"../img/Jenkins持续集成/cover.jpeg","text":" 什么是Jenkins？ Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomca...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"CI","slug":"CI","count":1,"path":"api/tags/CI.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"feature":true},"next_post":{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"Docker","date":"2018-11-24T06:15:13.000Z","updated":"2021-07-01T06:32:26.178Z","comments":true,"path":"api/articles/Docker.json","keywords":null,"cover":"../img/Docker/cover.jpeg","text":"什么是Docker? Docker是基于Go语言实现的云开源项目。Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或者数据库应用等...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"feature":true}}