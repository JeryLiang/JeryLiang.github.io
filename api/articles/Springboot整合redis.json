{"title":"Springboot整合redis","uid":"09e2399cbd512aa4be49b295beddf488","slug":"Springboot整合redis","date":"2019-03-21T06:52:34.000Z","updated":"2021-07-01T07:47:58.856Z","comments":true,"path":"api/articles/Springboot整合redis.json","keywords":null,"cover":"../img/Springboot整合redis/cover.jpeg","content":"<p>####一、redis服务器安装与配置<br>1.redis安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#下载相应相应的tar.gz包\nwget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz\n#解压\ntar -zxvf redis-5.0.3.tar.gz\n#到解压出来的目录下执行编译与安装\ncd redis-5.0.3\nmake \n#安装至&#x2F;usr&#x2F;local&#x2F;redis这个文件夹底下\nmake install PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis\n#若执行了上一步的指定相应目录，可以将redis.conf也移过去，方便启动的时候使用，其实也可以不在那位置，我们可以在启动的时候指定想要使用的配置文件</code></pre>\n<p>2.开启远程访问redis服务：<br>修改redis.conf配置文件，修改部分如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1)注释掉bind 127.0.0.1\n2)redis在目前的版本中单纯注释上一步的内容还是不行的，需要将protected-mode yes改为protected-mode no\n3)若服务器开启了防火墙的话，需要开放6379这个端口号，开放端口号指令如下：\nfirewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent\n4)重新加载firewalld：\nfirewall-cmd --reload</code></pre>\n<p>3.后台启动redis、关闭redis</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1)需要修改redis.conf文件中的daemonize no 的no改为daemonize yes;\n&#x2F;&#x2F;其中后面的.&#x2F;etc&#x2F;redis.conf为加载配置文件\n2)进入redis目录下执行  bin&#x2F;redis-server  .&#x2F;etc&#x2F;redis.conf  开始后端执行redis\n3)执行 ps -ef | grep -i redis 来查看redis运行的进程号\n&#x2F;&#x2F;若要关闭redis服务，可执行如下指令\n4)bin&#x2F;redis-cli shutdown</code></pre>\n<p>####二、springboot整合redis<br>1.引入依赖包:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-data-redis --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;</code></pre>\n<p>2.配置application.yml中配置redis:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">spring:\n  redis: \n    host: localhost\n    port: 6379\n    password:          # redis默认不使用密码，即空。若有，输入对应密码即可\n    database: 0\n    pool:\n      max-active: 8   # 连接池最大连接数(-1表示无没有限制)\n      min-idle: 0     # 连接池中最小空闲连接\n      max-idle: 8     # 连接池最大空闲连接\n      max-wait: -1    # 连接池最大阻塞时间(-1表示无没有限制)</code></pre>\n<p>3.在springboot启动类上加上注解@EnableCaching，如下图：<br><img src=\"../img/Springboot%E6%95%B4%E5%90%88redis/1.png\" alt=\"image\"><br>4.创建RedisUtil.java类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.spring.boot.demo.Util;\n\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport java.util.concurrent.TimeUnit;\n\n&#x2F;**\n * @Author: JerryLiang\n * @Date: 2019&#x2F;3&#x2F;20 21:33\n **&#x2F;\n@Component\npublic class RedisUtil &#123;\n\n    @Resource\n    private RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n    public void setRedisTemplate(RedisTemplate&lt;String, Object&gt; redisTemplate)&#123;\n        this.redisTemplate &#x3D; redisTemplate;\n    &#125;\n\n    &#x2F;**\n     * 指定缓存失效时间\n     * @param key 键\n     * @param time 时间(秒)\n     *&#x2F;\n    public boolean expire(String key, long time) &#123;\n        try&#123;\n            if(time &gt; 0)&#123;\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n            &#125;\n            return true;\n        &#125;catch (Exception e)&#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n &#x2F;**\n     * 普通缓存获取\n     *\n     * @param key 键\n     * @return 值\n     *&#x2F;\n    public Object get(String key) &#123;\n        return key &#x3D;&#x3D; null ? null : redisTemplate.opsForValue().get(key);\n    &#125;\n\n    &#x2F;**\n     *  判断key是否存在\n     * @param key 键\n     * @return true 存在 false 不存在\n     *&#x2F;\n    public boolean hasKey(String key)&#123;\n        try&#123;\n            System.out.println(key);\n            return redisTemplate.hasKey(key);\n        &#125;catch (Exception e)&#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n    &#x2F;**\n     *  删除缓存\n     * @param key\n     *&#x2F;\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public boolean del(String key)&#123;\n        if (key.equals(&quot;&quot;)|| key&#x3D;&#x3D;null) &#123;\n            return false;\n        &#125;else&#123;\n            redisTemplate.delete(key);\n            return true;\n        &#125;\n    &#125;\n\n    &#x2F;**\n     * 普通缓存放入\n     *\n     * @param key   键\n     * @param value 值\n     * @return true成功 false失败\n     *&#x2F;\n    public boolean set(String key, String value) &#123;\n        try &#123;\n            System.out.println(key);\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n\n    &#125;\n\n    &#x2F;**\n     * 普通缓存放入并设置时间\n     *\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     * @return true成功 false 失败\n     *&#x2F;\n    public boolean set(String key, String value, long time) &#123;\n        try &#123;\n            if (time &gt; 0) &#123;\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            &#125; else &#123;\n                set(key, value);\n            &#125;\n            return true;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n\n&#125;\n</code></pre>\n<p>5.在需要使用RedisUtil的类中注入RedisUtil：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Autowired\nprivate RedisUtil redisUtil;</code></pre>\n<p>6.测试使用：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">redisUtil.set(&quot;jerry&quot;,&quot;liang&quot;);</code></pre>\n<p>7.查看redis：<br><img src=\"../img/Springboot%E6%95%B4%E5%90%88redis/2.png\" alt=\"image\"></p>\n","text":"####一、redis服务器安装与配置1.redis安装 #下载相应相应的tar.gz包 wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.3.tar.gz #解压 tar -zxvf red...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":7,"path":"api/categories/Java.json"}],"tags":[{"name":"redis","slug":"redis","count":2,"path":"api/tags/redis.json"},{"name":"springboot","slug":"springboot","count":2,"path":"api/tags/springboot.json"}],"toc":"","author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"mapped":true,"prev_post":{"title":"LAMP环境搭建","uid":"95078be12975a222d9293ee317802e05","slug":"LAMP环境搭建","date":"2019-04-06T06:52:46.000Z","updated":"2021-07-01T07:57:51.290Z","comments":true,"path":"api/articles/LAMP环境搭建.json","keywords":null,"cover":"../img/LAMP环境搭建/cover.jpeg","text":"前言Centos7下LAMP的环境搭建！后续会带来集成LNMP的环境搭建！版本：Apache(httpd-2.4.38)+MySQL-5.7.24+PHP-7.1.26 第一步：配置防火墙 1.开放80和3306端口：firewall-cmd –zone=public –add-...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"LAMP","slug":"LAMP","count":1,"path":"api/tags/LAMP.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}},"next_post":{"title":"Nginx详解","uid":"d8b4487bc85f218a66607245054b2ebc","slug":"Nginx详解","date":"2019-03-19T06:52:16.000Z","updated":"2021-07-01T07:37:02.977Z","comments":true,"path":"api/articles/Nginx详解.json","keywords":null,"cover":"../img/Nginx详解/cover.jpeg","text":"nginx详解一、什么是正向代理和反向代理？ 正向代理 反向代理 URI、URL和URN: URI ：Uniform Resource Identifier，统一资源标识符； URL：Uniform Resource Locator，统一资源定位符； URN：Uniform Re...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"Devops","slug":"Devops","count":4,"path":"api/categories/Devops.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}}}