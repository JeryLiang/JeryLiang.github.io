{"title":"Mysql读写分离","uid":"c2a3674366d1787c09a254e4e4c87ed4","slug":"Mysql读写分离","date":"2019-06-04T06:58:09.000Z","updated":"2021-07-01T08:32:17.748Z","comments":true,"path":"api/articles/Mysql读写分离.json","keywords":null,"cover":"../img/Mysql读写分离/cover.jpeg","content":"<p>实现MySQL读写分离的前提是我们已经将MySQL主从复制配置完毕，可参考我上一篇关于<a href=\"https://www.jianshu.com/p/4541a68d16d7\">MySQL主从复制</a>的文章。<br>读写分离实现方式：<br>1）配置多数据源；<br>2）使用mysql的proxy中间件代理工具；<br>第一种方式中，数据库和Application是有一定侵入性的，即我们的数据库更换时，application中的配置文件是需要手动修改的。而第二种方式中，我们可选择mysql proxy固定连接一个数据库，即使数据库地址更换也无需更换项目中的数据库连接配置。<br>同样，在开始配置实现MySQL读写分离之前，我们会遇到一个选型问题，那就是在诸多的MySQL的proxy中间件工具中，如<code>mysql-proxy</code>、<code>atlas</code>、<code>cobar</code>、<code>mycat</code>、<code>tddl</code>、<code>tinnydbrouter</code>和<code>mysql router</code>等，我们该如何取舍呢？所以在择工具实现前，我们先对以上的proxy中间件做一个简单的优劣介绍，以便我们根据不同的场景选择。</p>\n<p>####1.MySQL的proxy中间件工具优劣<br>以下主要对比MyCat和MySQL Router。</p>\n<h5 id=\"1-1-MyCat\"><a href=\"#1-1-MyCat\" class=\"headerlink\" title=\"1.1 MyCat\"></a>1.1 MyCat</h5><p>是基于阿里巴巴的Cobar方案优化而来，支持半自动化分片，join。为什么叫”半自动化”呢？因为需要DBA对每个表的分片策略进行配置和干涉。<br>优点：</p>\n<ul>\n<li>功能较丰富，对读写分离和分库分表都有支持；</li>\n<li>易用，且对原有的应用系统侵入比较小，系统改造比较易于实现；</li>\n<li>支持故障切换；</li>\n</ul>\n<p>不足：</p>\n<ul>\n<li>在整个系统中，MyCat作为一个单节点来路由其他数据库，在数据库比较多的情况下，MyCat本身的CPU性能压力会越来越大。因此，在生产系统中，MyCat不可避免的会需要一些高可用的手段；</li>\n<li>同样，由于MyCat本身需要解析sql，也需要合并各个数据库返回的结果，本身CPU消耗会比较高，当达到一定临界点时，CPU可能会不堪重负。</li>\n</ul>\n<p>为此，在数据库较多的情况下，生产环境下的部署可能是这样的：<br><img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/1.png\" alt=\"部署图\"></p>\n<h5 id=\"1-2-MySQL-Router\"><a href=\"#1-2-MySQL-Router\" class=\"headerlink\" title=\"1.2 MySQL Router\"></a>1.2 MySQL Router</h5><p>MySQL Router是MySQL官方提供的一个轻量级中间件，可以在应用程序与MySQL服务器之间提供透明的路由方式。主要用以解决MySQL主从库集群的高可用、负载均衡、易扩展等问题。Router可以与MySQL Fabric无缝连接，允许Fabric存储和管理用于路由的高可用数据库服务器组，使管理MySQL服务器组更加简单。</p>\n<p>MySQL Router是一个可执行文件，可以与应用程序在同一平台上运行，也可以单独部署。虽然MySQL Router是InnoDB Cluster（MySQL 7.X）的一部分，MySQL 5.6 等版本数据库仍然可以使用Router作为其中间代理层。MySQL Router的配置文件中包含有关如何执行路由的信息。它与MySQL服务器的配置文件类似，也是由多个段组成，每个段中包含相关配置选项。</p>\n<p>MySQL Router是MySQL Proxy的替代方案，MySQL官方不建议将MySQL Proxy用于生产环境，并且已经不提供MySQL Proxy的下载。</p>\n<p>优点：</p>\n<ul>\n<li>类似于nginx，位于Application与MySQL Server之间。Application不再直连MySQL Server，而是与Router相连，根据Router的配置，将会把应用程序的读、写请求转发给下游的MySQL Server；</li>\n<li>支持故障切换：当下游某个Server失效时，Router可以将其从Active列表中移除，当其online后再次加入Active列表，即提供了Failover特性；</li>\n<li>当MySQL Server集群拓扑变更时，比如增减Slaves节点，只需要修改Router配置即可，无需修改应用中的数据库连接配置；</li>\n<li>如果MySQL Servers为5.7+版本，且构建为InnoDB Cluster模式，那么Router还能基于metaCache（metaServers）机制，感知MySQL Servers的主从切换、从库增减等集群拓扑变更，而且基于变更能够实现Master自动切换、Slaves列表自动装配等。比如Master失效后，Cluster将会自动选举一个新的Master，此时Router不需要任何调整、可以自动发现此新Master进而继续为应用服务。</li>\n</ul>\n<p>不足：</p>\n<ul>\n<li>Router中间件本身不会对请求“拆包”（unpackage），所以无法在Router中间件上实现比如“SQL审计”、“隔离”、“限流”、“分库分表”等功能。但是Router提供了plugin（C语言）机制，我们可以开发自己的plugin来扩展Router的额外特性；</li>\n<li>数据存储在内存中，数据量较大时，硬件需求会提升；</li>\n<li>在非InnoDB Cluster架构模式下，如果主从库拓扑变更，需要手动修改Router配置。且Router不支持“reload”，修改配置后需要重启，这在一定程度上会影响Application的服务可用性。</li>\n</ul>\n<p>对比以上两种proxy工具，本文选择了MyCat实现。</p>\n<h4 id=\"2-MyCat实现MySQL读写分离\"><a href=\"#2-MyCat实现MySQL读写分离\" class=\"headerlink\" title=\"2.MyCat实现MySQL读写分离\"></a>2.MyCat实现MySQL读写分离</h4><p>实验环境<br>| 服务器名称|版本| MySQL版本| IP|<br>|——-|—|———–|——-|<br>| MyCat代理中间件| Centos7.3| -| 192.168.ww.ww|<br>| 主数据库| Centos7.3| 5.7| 192.168.xx.xx |<br>| 从数据库| Centos7.3| 5.7| 192.168.yy.yy|</p>\n<h5 id=\"2-1-安装MyCat\"><a href=\"#2-1-安装MyCat\" class=\"headerlink\" title=\"2.1 安装MyCat\"></a>2.1 安装MyCat</h5><p><strong>安装JDK</strong><br>因为MyCat是用java语言编写的，需要JDK支持，JDK安装可参考此博客：<a href=\"http://michaeljian.top/2017/10/22/Centos7%E7%9A%84%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%EF%BC%88Java-Tomcat-Mysql-Nginx-Git%EF%BC%89/\">点此查看</a>。</p>\n<p><strong>安装MyCat</strong><br>本文下载的版本为<code>Mycat-server-1.6.5-release-20180122220033-linux.tar.gz</code>，<a href=\"http://dl.mycat.io/\">点此下载</a>。</p>\n<p>将压缩包用xftp上传到服务器<code>/usr/local/</code>下并解压</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd &#x2F;usr&#x2F;local&#x2F;\ntar -zxvf Mycat-server-1.6.5-release-20180122220033-linux.tar.gz</code></pre>\n<p>配置环境变量<code>vim /etc/profile</code> 在文件末尾加入如下代码，并保存：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MYCAT_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;mycat\nPATH&#x3D;$MYCAT_HOME&#x2F;bin:$PATH\nexport MYCAT_HOME PATH</code></pre>\n<p>使配置文件生效<code>source /etc/profile</code>；</p>\n<h5 id=\"2-2配置MyCat\"><a href=\"#2-2配置MyCat\" class=\"headerlink\" title=\"2.2配置MyCat\"></a>2.2配置MyCat</h5><p><strong>MyCat常用配置文件</strong><br>文件位置都在mycat下的conf目录中：<br>|文件|说明|<br>|–|–|<br>|server.xml|MyCat的配置文件，设置账号、参数等|<br>|schema.xml|MyCat对应的物理数据库和数据库表的设置|<br>|rule.xml|MyCat分片(分库分表)规则|<br>|wrapper.conf|MyCat启动日志信息|</p>\n<p><strong>配置server.xml</strong></p>\n<p>server.xml中主要配置内容如下(此为默认配置)，其他部分默认即可<br><img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/2.png\" alt=\"主要配置\"></p>\n<p>避免图片失效，多粘一份吧=-=！</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&lt;user name&#x3D;&quot;root&quot; defaultAccount&#x3D;&quot;true&quot;&gt;\n                &lt;property name&#x3D;&quot;password&quot;&gt;123456&lt;&#x2F;property&gt;\n                &lt;property name&#x3D;&quot;schemas&quot;&gt;TESTDB&lt;&#x2F;property&gt;\n\n                &lt;!-- 表级 DML 权限设置 --&gt;\n                &lt;!--            \n                &lt;privileges check&#x3D;&quot;false&quot;&gt;\n                        &lt;schema name&#x3D;&quot;TESTDB&quot; dml&#x3D;&quot;0110&quot; &gt;\n                                &lt;table name&#x3D;&quot;tb01&quot; dml&#x3D;&quot;0000&quot;&gt;&lt;&#x2F;table&gt;\n                                &lt;table name&#x3D;&quot;tb02&quot; dml&#x3D;&quot;1111&quot;&gt;&lt;&#x2F;table&gt;\n                        &lt;&#x2F;schema&gt;\n                &lt;&#x2F;privileges&gt;           \n                 --&gt;\n        &lt;&#x2F;user&gt;\n\n        &lt;user name&#x3D;&quot;user&quot;&gt;\n                &lt;property name&#x3D;&quot;password&quot;&gt;user&lt;&#x2F;property&gt;\n                &lt;property name&#x3D;&quot;schemas&quot;&gt;TESTDB&lt;&#x2F;property&gt;\n                &lt;property name&#x3D;&quot;readOnly&quot;&gt;true&lt;&#x2F;property&gt;\n        &lt;&#x2F;user&gt;\n</code></pre>\n<p>MyCat将多个MySQL集群整合起来对外提供服务，提供的服务接口仍然采用MySQL的形式。以上为MyCat对外的”虚拟数据库”配置文件。</p>\n<ul>\n<li>以上片段为MyCat默认配置的两个虚拟用户，分别为用户名为<code>root</code>和用户名为<code>user</code>的两个虚拟用户；</li>\n<li>默认用户为<code>root</code>用户，该用户没有配置<code>readOnly</code>的属性，为此拥有读写权限。而用户名为<code>user</code>的用户配置了<code>readOnly</code>的属性为true，为此只有读权限；</li>\n<li><code>root</code>的密码被设置为<code>123456</code>，而<code>user</code>的密码被设置为<code>user</code>；</li>\n<li>两者使用的都是<code>TESTDB</code>逻辑库，<code>TESTDB</code>逻辑库的配置在<code>schema.xml</code>中</li>\n</ul>\n<p>以上的用户名和密码我们都可以根据个人需求进行修改。</p>\n<p><strong>配置schema.xml</strong></p>\n<p>以下为schema.xml默认的配置文件(其实我删了一小部分schema中的table，因为我们目前做的只是读写分离，因此忽略此部分)：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mycat:schema xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;\n        &lt;!--逻辑数据库配置，name与server.xml中配置的数据库对应--&gt;\n        &lt;schema name&#x3D;&quot;TESTDB&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot;&gt;\n                &lt;!-- 如果只是做读写分离，那么我们就不需要配置这个table --&gt;\n                &lt;!--&lt;table name&#x3D;&quot;travelrecord&quot; dataNode&#x3D;&quot;dn1,dn2,dn3&quot; rule&#x3D;&quot;auto-sharding-long&quot; &#x2F;&gt;--&gt;\n        &lt;&#x2F;schema&gt;\n        &lt;!-- &lt;dataNode name&#x3D;&quot;dn1$0-743&quot; dataHost&#x3D;&quot;localhost1&quot; database&#x3D;&quot;db$0-743&quot;\n                &#x2F;&gt; --&gt;\n        &lt;!--设置实际服务器中数据库--&gt;\n        &lt;dataNode name&#x3D;&quot;dn1&quot; dataHost&#x3D;&quot;localhost1&quot; database&#x3D;&quot;db1&quot; &#x2F;&gt;\n   \n         &lt;!--物理数据库配置--&gt;\n  &lt;dataHost name&#x3D;&quot;localhost1&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;0&quot;\n                          writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot; dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;  slaveThreshold&#x3D;&quot;100&quot;&gt;\n                &lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;\n                &lt;!-- can have multi write hosts --&gt;\n                &lt;writeHost host&#x3D;&quot;hostM1&quot; url&#x3D;&quot;localhost:3306&quot; user&#x3D;&quot;root&quot;\n                                   password&#x3D;&quot;123456&quot;&gt;\n                        &lt;!-- can have multi read hosts --&gt;\n                        &lt;readHost host&#x3D;&quot;hostS2&quot; url&#x3D;&quot;192.168.1.200:3306&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;xxx&quot; &#x2F;&gt;\n                &lt;&#x2F;writeHost&gt;\n                &lt;writeHost host&#x3D;&quot;hostS1&quot; url&#x3D;&quot;localhost:3316&quot; user&#x3D;&quot;root&quot;\n                                   password&#x3D;&quot;123456&quot; &#x2F;&gt;\n                &lt;!-- &lt;writeHost host&#x3D;&quot;hostM2&quot; url&#x3D;&quot;localhost:3316&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123456&quot;&#x2F;&gt; --&gt;\n        &lt;&#x2F;dataHost&gt;\n&lt;&#x2F;mycat:schema&gt;\n</code></pre>\n<p>简单解释一下上面代码各参数的含义：<br>|参数|说明|<br>|–|–|<br>|schema|数据库设置，此数据库为逻辑数据库，name与server.xml中的schema对应|<br>|dataNodel|分片信息，也就是分库相关配置|<br>|dataHost|物理数据库，真正存储数据的数据库|</p>\n<p>每个节点的属性详细说明<br><strong>schema</strong><br>|属性|说明|<br>|–|–|<br>|name|逻辑数据库名称，与server.xml中的schema对应|<br>|checkSQLschema|数据库前缀相关设置，建议看文档，这里暂时设为folse|<br>|sqlMaxLimit|select 时默认的limit，避免查询全表|<br>|dataNode|分库配置|</p>\n<p><strong>table</strong><br>|属性|说明|<br>|–|–|<br>|name|表名，物理数据库中表名|<br>|dataNode|表存储到哪些节点，多个节点用逗号分隔。节点为下文dataNode设置的name|<br>|primaryKey|主键字段名，自动生成主键时需要设置|<br>|autoIncrement|是否自增|<br>|rule|分片规则名|</p>\n<p><strong>dataNode</strong><br>|属性|说明|<br>|–|–|<br>|name|节点名，与table中dataNode对应|<br>|dataHost|物理数据库名，与datahost中name对应|<br>|database|物理数据库中数据库名|</p>\n<p><strong>dataHost</strong><br>|属性|说明|<br>|–|–|<br>|name|物理数据库名，与dataNode中dataHost对应|<br>|balance|负载均衡策略，0为不开启读写分离，1为开启读写分离|<br>|writeType|写入方式|<br>|dbType|数据库类型|<br>|heartbeat|心跳检测语句，注意语句结尾的分号要加|</p>\n<p>详细介绍以下几个属性值：</p>\n<ul>\n<li><code>balance=&quot;1&quot;</code>：全部的readHost与stand by writeHost参与select语句的负载均衡；</li>\n<li><code>writeType=&quot;0&quot;</code>：所有的写操作都发送到配置文件中的第一个<code>writeHost</code>。(注意：第一个<code>writeHost</code>故障切换到第二个后，即使之后修复了仍然维持第二个为写库)。推荐取值为0，不建议修改；</li>\n<li><code>switchType=&quot;1&quot;</code>：1为默认值，即自动切换。</li>\n</ul>\n<p>罗列了这么多的属性意思，想必大家已经知道需要配置什么了吧！我们可以根据自己的需求来进行配置，那么接下来我以简单的读写分离来示例配置，以下介绍修改的地方：</p>\n<ul>\n<li><p>在以上默认配置文件schema中并没有设置属性<code>dataNode</code>，为此我们加入<code>dataNode=&quot;dn1&quot;</code>，其中dn1对应<code>&lt;dataNode/&gt;</code>部分中的name属性值；同时，将默认设置的table部分注释掉，最终schema剩余部分如下</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&lt;schema name&#x3D;&quot;test&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot;  dataNode&#x3D;&quot;dn1&quot; &gt;\n &lt;!-- 本文做的是单纯的读写分离配置为此此处不需要table ，将默认的table注释掉   \n \t&lt;table name&#x3D;&quot;travelrecord&quot; dataNode&#x3D;&quot;dn1&quot; rule&#x3D;&quot;auto-sharding-long&quot; &#x2F;&gt;\n\t--&gt;    \n&lt;&#x2F;schema&gt;</code></pre></li>\n<li><p>将<code>&lt;dataNode/&gt;</code>部分中的<code>database</code>属性值改为我们实际储存数据的数据库名称；默认配置中给我们设置了3个<code>dataNode</code>，本环境中只有一个主数据库和一个从数据库，为此我们只保留一个<code>dataNode</code>，如下</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&lt;!--其中database为这是连接的数据库名称，我配置的是我真实数据库中的spring数据库--&gt;\n&lt;dataNode name&#x3D;&quot;dn1&quot; dataHost&#x3D;&quot;localhost1&quot; database&#x3D;&quot;spring&quot; &#x2F;&gt;\n</code></pre></li>\n<li><p><code>&lt;dataHost/&gt;</code>部分的<code>&lt;writeHost&gt;</code>中的host属性值可改可不改，但是url需要改成我们真实数据库的地址，因为我们在主库中进行写操作，为此此处的url改为我们的主数据ip，即<code>url=&quot;192.168.xx.xx&quot;</code>；而<code>user</code>与<code>password</code>两个属性的属性值设置为连接主数据库的用户名和密码；同时，需要将<code>balance</code>的属性值改为1，即<code>balance=&quot;1&quot;</code>，若为0会在测试时发现读写都是在主库执行；</p>\n</li>\n<li><p><code>&lt;readHost&gt;</code>部分设置host属性值可改可不改；而url改为我们的从数据库ip，即<code>url=&quot;192.168.yy.yy&quot;</code>，user和password设置为连接从数据库的用户名和密码；</p>\n</li>\n<li><p>此处因为实验环境是一个主数据库，一个从数据库，为此这里只配置了一个<code>WriteHost</code>和一个<code>readHost</code>；在默认的配置文件中可以看到是可以配置多个的，我们将多余的一个<code>writeHost</code>，最终剩下如下部分</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">&lt;dataHost name&#x3D;&quot;localhost1&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;1&quot;\n                         writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot; dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;  slaveThreshold&#x3D;&quot;100&quot;&gt;\n               &lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;\n               &lt;writeHost host&#x3D;&quot;hostM1&quot; url&#x3D;&quot;192.168.xx.xx:3306&quot; user&#x3D;&quot;root&quot;\n                                  password&#x3D;&quot;password&quot;&gt;\n                       &lt;readHost host&#x3D;&quot;hostS2&quot; url&#x3D;&quot;192.168.yy.yy:3306&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;password&quot; &#x2F;&gt;\n               &lt;&#x2F;writeHost&gt;\n       &lt;&#x2F;dataHost&gt;\n</code></pre></li>\n</ul>\n<p><strong>log4j2.xml</strong><br>将日志等级改为<code>debug</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;asyncRoot level&#x3D;&quot;debug&quot; includeLocation&#x3D;&quot;true&quot;&gt;\n            &lt;!--&lt;AppenderRef ref&#x3D;&quot;Console&quot; &#x2F;&gt;--&gt;\n            &lt;AppenderRef ref&#x3D;&quot;RollingFile&quot;&#x2F;&gt;\n&lt;&#x2F;asyncRoot&gt;</code></pre>\n\n<p>至此，整体配置已经完成了，我们开始进行测试！</p>\n<h4 id=\"3-测试配置是否成功\"><a href=\"#3-测试配置是否成功\" class=\"headerlink\" title=\"3.测试配置是否成功\"></a>3.测试配置是否成功</h4><p><strong>开启MyCat</strong><br>我们要开启MyCat直接输入启动指令即可，后两条指令为我们停止和重启的时候使用；</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;bin\n# 启动\n.&#x2F;mycat start\n\n#停止\n.&#x2F;mycat stop\n\n#重启\n.&#x2F;mycat restart </code></pre>\n<p><strong>查看端口</strong><br>其中9066为虚拟schema管理端口，用于查看MyCat运行的情况；<br>其中8066为虚拟schema登录端口，用于SQL管理，跟普通MySQL差不多</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">netstat -tnlp</code></pre>\n<p><img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/3.png\" alt=\"查看端口\"></p>\n<p><strong>登录MyCat读写分离服务</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 9066是管理端口\nmysql -u root -p 123456 -h 127.0.0.1 -P 9066</code></pre>\n<p>查看心跳检测</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show @@help; #查看帮助\nshow @@heartbeat; #查看心跳\n#RS_CODE为1表示心跳正常</code></pre>\n<p><img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/4.png\" alt=\"查看心跳状态\"></p>\n<p>查看机器的读写分离配置情况</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show @@datasource;</code></pre>\n<p><img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/5.png\" alt=\"读写分离状况图\"></p>\n<p>可以看到<code>hostM1</code>拥有<code>W</code>写权限，<code>hostS2</code>拥有<code>R</code>读权限</p>\n<p><strong>MyCat读写分离验证</strong><br>登录到MyCat的SQL管理服务：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql -u root -p 123456 -h 127.0.0.1 -P 8066</code></pre>\n<p>可以用简单的指令查看当前数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show databases;\nuse xxx; # 其中xxx为刚才看到的数据库中的一个\nshow tables; \nselect * from jerry; #为后续做验证准备，这个我们可以按照我们真实表来，此处因为我的数据库中有jerry表，所以以此来示例</code></pre>\n<p><img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/6.png\" alt=\"简单查看\"></p>\n<p><img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/7.png\" alt=\"查询\"></p>\n<p><strong>验证部分</strong><br>有两种思路来验证：<br>1） 在从数据中关闭slave(即关闭主从复制)；然后在mycat管理端中往某个表中插入一条数据；再使用select查询该表，可以看到查询出来的结果中并没有新的那条数据。（解释：因为关闭了主从复制，插入新数据在主库进行，而查询的是从库，为此不会查询到新插入的数据）；<br>2）不关闭slave的主从复制，直接在从库中修改表中的某个值，而主库的值不变，直接使用查询表数据时会发现查询出来的结果是从库表中的数据（可以根据改变的值对比看出）</p>\n<p>本文主要使用第一种思路进行验证：</p>\n<ul>\n<li>打开从数据库服务器，并进入mysql中，并停止上篇文章中配置的主从复制；<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql -u root -p #进入从数据库\nstop slave; #关闭主从复制</code></pre></li>\n<li>再回到我们的mycat安装的服务器中，在已登录的MyCat的SQL管理服务中进行插入一条数据，我的示例如下；<pre class=\"line-numbers language-none\"><code class=\"language-none\">insert into jerry (name) values (&#39;liang&#39;)；#我表id是自增的，所以只插入name\nselect * from jerry；#查看</code></pre>\n<img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/8.png\" alt=\"验证结果图\"></li>\n</ul>\n<p>可以发现并没有刚插入的数据，我们再打开主数据库，查看是否有更新；（是因为我多次测试，之前没把balance属性值设置为1，导致读写一直是在主库执行，为此主键已经到12了==！）</p>\n<p><img src=\"../img/Mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/9.png\" alt=\"验证结果图\"></p>\n<p>至此，读写分离验证成功了！第二种小伙伴们可以亲自去尝试一下。对了，验证完记得到从数据库中<code>start salve</code>开启主从复制，避免以后忘了。</p>\n<p>####参考资料<br><a href=\"https://segmentfault.com/a/1190000009520414\">https://segmentfault.com/a/1190000009520414</a><br><a href=\"https://www.cnblogs.com/joylee/p/7513038.html\">https://www.cnblogs.com/joylee/p/7513038.html</a><br><a href=\"https://www.2cto.com/database/201709/676648.html\">https://www.2cto.com/database/201709/676648.html</a></p>\n","text":"实现MySQL读写分离的前提是我们已经将MySQL主从复制配置完毕，可参考我上一篇关于MySQL主从复制的文章。读写分离实现方式：1）配置多数据源；2）使用mysql的proxy中间件代理工具；第一种方式中，数据库和Application是有一定侵入性的，即我们的数据库更换时，a...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Database","slug":"Database","count":3,"path":"api/categories/Database.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":3,"path":"api/tags/Mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-MyCat\"><span class=\"toc-text\">1.1 MyCat</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-MySQL-Router\"><span class=\"toc-text\">1.2 MySQL Router</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-MyCat%E5%AE%9E%E7%8E%B0MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB\"><span class=\"toc-text\">2.MyCat实现MySQL读写分离</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%89%E8%A3%85MyCat\"><span class=\"toc-text\">2.1 安装MyCat</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-2%E9%85%8D%E7%BD%AEMyCat\"><span class=\"toc-text\">2.2配置MyCat</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%B5%8B%E8%AF%95%E9%85%8D%E7%BD%AE%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F\"><span class=\"toc-text\">3.测试配置是否成功</span></a>","author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}},"mapped":true,"prev_post":{"title":"SpringCloud","uid":"2fdfe1e1ace8a4912a23a4cbc1c92824","slug":"SpringCloud","date":"2019-06-06T03:26:21.000Z","updated":"2021-07-08T11:48:43.304Z","comments":true,"path":"api/articles/SpringCloud.json","keywords":null,"cover":"../img/SpringCloud/cover.jpeg","text":"本文中我们主要介绍微服务开发框架——Spring Cloud。尽管Spring Cloud带有”Cloud”的字样，但它并不是云计算解决方案，而是Spring Boot的基础上构建的，用于快速构建分布式系统的通用模式的工具集。 Spring Cloud的特点Spring Clou...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":7,"path":"api/categories/Java.json"}],"tags":[{"name":"Microservice","slug":"Microservice","count":2,"path":"api/tags/Microservice.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}},"next_post":{"title":"Mysql主从复制(一)--实战","uid":"db73b6318bddc8aeb59536b254b9242c","slug":"Mysql主从复制-一-实战","date":"2019-06-03T06:55:03.000Z","updated":"2021-07-01T08:25:55.206Z","comments":true,"path":"api/articles/Mysql主从复制-一-实战.json","keywords":null,"cover":"../img/Mysql/cover.jpeg","text":"在开始实际讲解MySQL主从复制如何实现之前，我们可以先思考一个问题！那就是，我们为什么要用数据库主从复制呢？它能为我们解决什么业务问题？在思考过后我们开始进入正题吧！ 1.MySQL主从复制是什么？主从同步使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Database","slug":"Database","count":3,"path":"api/categories/Database.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":3,"path":"api/tags/Mysql.json"}],"author":{"name":"安安哎呀呀","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"山内有樱名为良，树本无名只待春","socials":{"github":"https://github.com/JeryLiang","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/243662531"},"jianshu":{"icon":"/svg/jianshu.svg","link":"https://www.jianshu.com/u/f1275d68d75d"}}}}}}