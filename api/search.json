[{"id":"03262ebd7a1c2d262927581eaf4e7b3b","title":"Jenkins持续集成","content":" \n什么是Jenkins？\nJenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。  通常与版本管理工具(SCM)、构建工具结合使用；常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。\nJenkins两大特性\n1.持续集成（Continuous integration, CI）\n \n持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。\n持续集成有以下几个优点：\n\n  从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，减少人工干预；\n\n  任何时间、任何地点生成可部署的软件，出现问题，项目成员会被马上通知到，问题第一时间修复；\n\n  增强项目可见性，有效的控制台日志能帮助我们更好的解决存在的问题。\n\n\n2.持续交付（Continuous delivery, CD）\n持续交付则是经典的敏捷的软件开发方法的自然延伸，它强调产品在修改后到部署上线的流程要敏捷话、自动化。甚至一些较小的改变也要尽早的部署上线。通俗的讲可以有几个特点：\n\n  代码越早交付出去，用户越早能用到，快就是商业价值；\n\n  用户反馈能及时作出处理，能帮助产品市场人员调整测策略；\n\n  降低修改成本。\n\n\n \n前后对比\n1.传统的项目部署\n \n2.持续部署\n\nJekins的安装\n官方下载地址：https://jenkins.io/download/\n \n我选择下载的war包，将war包用xftps传到自己的服务器后有两种方式可以启动jenkins：\n第一种：  ​  将war包移至tomcat/webapps下，启动tomcat  ​  浏览器输入: 你的IP地址:tomcat开放的端口号\n第二种：\n进入你war包存放的位置，输入以下指令后台启动jenkins：\nnohup java -jar jenkins.war --logfile=server.log --httpPort=8088 &gt; server.log 2&gt;&amp; 1 &amp; \n默认情况不指定--httpPort的话jenkins使用的是8080端口，在此我指定的端口是8088\nJenkins的配置\n以下为Jenkins的主界面：\n \n其中主要的配置都是在系统管理中设置：\n\n  在系统设置里设置全局设置相关的内容；\n\n  在全局安全配置里配置各用户权限；\n\n  在全局工具里配置相应的项目运行环境，比如JDK，MAVEN等；\n\n  在插件管理中添加自己想要使用的插件；\n\n  在节点管理中管理自己的服务器集群。\n\n\n \n全局工具配置\n \n配置JDK、Git、Maven等路径。\n插件管理\n \n在插件管理中插件类型众多，很大程度的满足了我们的需求，可以选择自己需要使用的插件，也可以制作相应的插件上传。\n常用的插件：\n \n主要介绍以下几个插件：\nGitHub Branch Source Plugin ：代码仓库；\nDeploy to container Plugin ：部署代码至相应的容器；\nMaven Integration Plugin ：构建Maven项目需要使用此插件；\nSSH Plugin 和 SSH Slave Plugin ：配置免密登录某一节点需要使用到；\n节点管理\n \n新建项目\n\n选择需要怎样构建一个项目，在此以构建一个自由风格的软件项目为例。\n源码管理\n \n设置仓库url，构建时从此仓库获得源码。这里不仅可以使用Git源码管理，同样可以使用SVN，Coding等别的仓库，需要下载相应的插件。\n构建触发器\n \n构建触发器是指以何种方式来触发自动构建：\n\n  第一种：触发远程构建（例如，使用脚本）\n\n \n图中的身份证令牌（TOKEN_NAME）即为要触发构建需要的KEY，访问URL中加入key后才可自动触发自动构建。\n\n  第二种：在其他工程构建后触发；\n\n  第三种：定时构建；\n\n  第四种：GitHub hook trigger for GITScm polling，使用github上的webhook钩子来实现代码push时，发送相应的请求，该请求即为我们触发自动构建的URL加key;\n\n  第五种：轮询SCM，\n\n\n构建\n此处选择的是执行相应的shell命令：\n \nBUILD_ID&#x3D;DONTKILLME\n. &#x2F;etc&#x2F;profile\nexport PROJ_PATH&#x3D;pwd\nexport TOMCAT_APP_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-8.5.34\n\nsh $PROJ_PATH&#x2F;order&#x2F;deploy.sh\n其中前四句指令是在/etc/profile/路径下添加PROJ_PATH（项目路径）的环境配置，TOMVAT_APP_PATH（tomcat路径），最后一个是执行项目中的脚本。\n","slug":"Jenkins持续集成","date":"2021-06-30T07:56:32.000Z","categories_index":"Devops","tags_index":"CI","author_index":"安安哎呀呀"},{"id":"144f0b4d9b9f80ea377106e9c6a54a45","title":"Linux基础","content":"一.基础指令​  file+文件名：查看文件类型 ；\n​  cat+文件名：查看文件；\n​  less + 文件名：分页查看文件；\n​  echo+内容：打印想要输出的内容;\n​  echo+内容&gt;文件名：打印内容至指定的文件里;\n​  ls +命令（错误的） 2&gt; 文件名： 重定向标准错误输出，即把指令输入错误的报错信息重定向保存至2&gt;后的文\n​  件中；重定向标准输出则为&lt;号；\n​  \n​  强制删除文件夹包括文件夹下的文件 ：rm -rf 文件夹名。\n​  查看防火墙状态：firewall-cmd –state；\n​  停止firewall： systemctl stop firewalld.service；\n​  禁止防火墙开机启动：systemctl disable firewalld.service；\n二.权限设置1.文件权限\n\n​  r指读权限，W指有写权限，-指无权限，x为执行权限。 ls -l +文件名:查看文件的权限情况。\n​ 2.添加权限（有权限代表1，无权限为0，共9位数，如上图，每3位代表R W X 读，写，执行权限，）\n​  例1： chmod +w 文件名；为当前操作目录的用户添加当前工作目录的写权限；\n​  chmod +r 文件名 ；添加读权限；\n​  chmod +x 文件名； 添加执行权限。\n​  例2： -rw-rw-r– 转化位二进制即 110  110  100 即要授予owner执行权限则需输入如下指令 (111 110 100) 111 二进制转化为十进制为 7 ，110转化为6 ，100转化为4。则指令应为\nchmod 764 +文件名或目录名。\n三.进程​  1.查看当前所有进程，并分页式输出(利用了管道)；\n​  例： ps aux|less\n​  2.查看附带模糊进程名；\n​  例： ps aux|grep vim 查询包含字符串vim的进程\n​  3.kill+进程ID结束指定的进程；\n\n​  kill -数字编号 进程ID 实现终止指定进程；\n​  例：kill -9 15 ，以编号9的方式终止15号进程。\n四.查找​  1.find 查出当前目录的所有文件；\n​  2.find+ |grep .txt 利用管道实现指定查找（筛选查找）；\n1)只想查看文件：find -type f\n​  2)只想查看目录：find -type d\n​  3)按类型查看的同时执行新的指令：find -type f -exec ls -l ‘{}’ ‘;’\n​  其中**-exec** 后为查找文件成功后想要执行的指令(本次查询完执行的指令为 ls -l ), **’;’**为-exec的结\n​  束符, **’{}’**代表查询到的文件。\n五.可执行文件​  1.ln -s a.sh test ：给可执行文件a.sh的别名为test;\n​  2. ./ a.sh ：执行a.sh这个可执行文件；\n六.配置JDK与下载各种软件​  1.yum install update ：更新系统中的package;\n​  2.curl + 网址 ：链接到网址(即打开对应的网站)；\n​  3.yum install +软件名：下载对应的应用软件;\n​  例： yum install wget 下载wget。\n​ 4.wget + 下载链接 ：下载；\n​  5.编辑文件结束后\n1）不想保存任何修改则输入 ：q!\n​  2）保存修改并退出则输入 ：wq\n​  6.配置JDK环境变量： vim /etc/profile (编辑配置文件) 需要输入的内容为（如下图）;\n \n​  7.使配置文件生效: source /etc/profile;\n​  8.解压文件：tar -zxvf 压缩包名 。\n​  9.进入到要安装得文件后执行编译安装指令: ./configure –prefix=/usr/local （其中–prefix=后为指定安装路径）,编译完后执行安装指令 make &amp;&amp; make install 。\n七.脚本​  可执行文件.sh中编写\n​  cd $1 \\\\链接到第一个文件\n​  echo I am in ‘pwq’  \\\\打印 I am in 当前工作目录路径 (其中‘ ’为tab键上的\\的一个按键，它会提取pwd指令的返回结果）\n​  for file in ‘ls’  \\对要操作的文件夹的文件全部替换名字，例a 执行脚本 后会变a.txt\n​  do\n​ 对应的操作\n​  done  \\结束脚本\n八.nginx\n cd /usr/local/sbin ：链接到此目录下；\n\n ./nginx ：启动nginx；\n\n ./nginx -s reload ：重启nginx（在没有配置全局变量的时候需要在nginx可执行目录sbin下，再输入此命令）；\n\n 验证nginx配置文件是否正确：进入nginx安装目录下的sbin下，输入**./nginx -t** ；\n\n停止nginx\n 1)ps -ef | grep nginx ;\n 2)从容停止nginx：kill -QUIT 主进程号；\n 3）快速停止：kill -TERM 主进程号；\n 4）强制停止 ：pkill -9 nginx 。\n\n\n九.Vim\n vim 开启行号：在命令模式下输入set number （即保存输入wq的位置输入set number按回车即可）；\n\n vim 关闭行号：set nonumber；\n\n\n","slug":"Linux基础","date":"2018-07-20T09:49:56.000Z","categories_index":"Linux","tags_index":"Linux","author_index":"安安哎呀呀"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2018-07-20T07:49:56.000Z","categories_index":"Hexo","tags_index":"Hexo","author_index":"Ananya"}]